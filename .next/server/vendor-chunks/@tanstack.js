"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanstack";
exports.ids = ["vendor-chunks/@tanstack"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/focusManager.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FocusManager: () => (/* binding */ FocusManager),\n/* harmony export */   focusManager: () => (/* binding */ focusManager)\n/* harmony export */ });\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\nclass FocusManager extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(){\n        super();\n        this.setup = (onFocus)=>{\n            // addEventListener does not exist in React Native, but window does\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer && window.addEventListener) {\n                const listener = ()=>onFocus(); // Listen to visibillitychange and focus\n                window.addEventListener(\"visibilitychange\", listener, false);\n                window.addEventListener(\"focus\", listener, false);\n                return ()=>{\n                    // Be sure to unsubscribe if a new handler is set\n                    window.removeEventListener(\"visibilitychange\", listener);\n                    window.removeEventListener(\"focus\", listener);\n                };\n            }\n        };\n    }\n    onSubscribe() {\n        if (!this.cleanup) {\n            this.setEventListener(this.setup);\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            var _this$cleanup;\n            (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n            this.cleanup = undefined;\n        }\n    }\n    setEventListener(setup) {\n        var _this$cleanup2;\n        this.setup = setup;\n        (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n        this.cleanup = setup((focused)=>{\n            if (typeof focused === \"boolean\") {\n                this.setFocused(focused);\n            } else {\n                this.onFocus();\n            }\n        });\n    }\n    setFocused(focused) {\n        this.focused = focused;\n        if (focused) {\n            this.onFocus();\n        }\n    }\n    onFocus() {\n        this.listeners.forEach((listener)=>{\n            listener();\n        });\n    }\n    isFocused() {\n        if (typeof this.focused === \"boolean\") {\n            return this.focused;\n        } // document global can be unavailable in react native\n        if (typeof document === \"undefined\") {\n            return true;\n        }\n        return [\n            undefined,\n            \"visible\",\n            \"prerender\"\n        ].includes(document.visibilityState);\n    }\n}\nconst focusManager = new FocusManager();\n //# sourceMappingURL=focusManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL2ZvY3VzTWFuYWdlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrRDtBQUNYO0FBRXZDLE1BQU1FLHFCQUFxQkYsMkRBQVlBO0lBQ3JDRyxhQUFjO1FBQ1osS0FBSztRQUVMLElBQUksQ0FBQ0MsS0FBSyxHQUFHQyxDQUFBQTtZQUNYLG1FQUFtRTtZQUNuRSx1RUFBdUU7WUFDdkUsSUFBSSxDQUFDSixnREFBUUEsSUFBSUssT0FBT0MsZ0JBQWdCLEVBQUU7Z0JBQ3hDLE1BQU1DLFdBQVcsSUFBTUgsV0FBVyx3Q0FBd0M7Z0JBRzFFQyxPQUFPQyxnQkFBZ0IsQ0FBQyxvQkFBb0JDLFVBQVU7Z0JBQ3RERixPQUFPQyxnQkFBZ0IsQ0FBQyxTQUFTQyxVQUFVO2dCQUMzQyxPQUFPO29CQUNMLGlEQUFpRDtvQkFDakRGLE9BQU9HLG1CQUFtQixDQUFDLG9CQUFvQkQ7b0JBQy9DRixPQUFPRyxtQkFBbUIsQ0FBQyxTQUFTRDtnQkFDdEM7WUFDRjtRQUNGO0lBQ0Y7SUFFQUUsY0FBYztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUNDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUNDLGdCQUFnQixDQUFDLElBQUksQ0FBQ1IsS0FBSztRQUNsQztJQUNGO0lBRUFTLGdCQUFnQjtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUNDLFlBQVksSUFBSTtZQUN4QixJQUFJQztZQUVIQSxDQUFBQSxnQkFBZ0IsSUFBSSxDQUFDSixPQUFPLEtBQUssT0FBTyxLQUFLLElBQUlJLGNBQWNDLElBQUksQ0FBQyxJQUFJO1lBQ3pFLElBQUksQ0FBQ0wsT0FBTyxHQUFHTTtRQUNqQjtJQUNGO0lBRUFMLGlCQUFpQlIsS0FBSyxFQUFFO1FBQ3RCLElBQUljO1FBRUosSUFBSSxDQUFDZCxLQUFLLEdBQUdBO1FBQ1pjLENBQUFBLGlCQUFpQixJQUFJLENBQUNQLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSU8sZUFBZUYsSUFBSSxDQUFDLElBQUk7UUFDM0UsSUFBSSxDQUFDTCxPQUFPLEdBQUdQLE1BQU1lLENBQUFBO1lBQ25CLElBQUksT0FBT0EsWUFBWSxXQUFXO2dCQUNoQyxJQUFJLENBQUNDLFVBQVUsQ0FBQ0Q7WUFDbEIsT0FBTztnQkFDTCxJQUFJLENBQUNkLE9BQU87WUFDZDtRQUNGO0lBQ0Y7SUFFQWUsV0FBV0QsT0FBTyxFQUFFO1FBQ2xCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUVmLElBQUlBLFNBQVM7WUFDWCxJQUFJLENBQUNkLE9BQU87UUFDZDtJQUNGO0lBRUFBLFVBQVU7UUFDUixJQUFJLENBQUNnQixTQUFTLENBQUNDLE9BQU8sQ0FBQ2QsQ0FBQUE7WUFDckJBO1FBQ0Y7SUFDRjtJQUVBZSxZQUFZO1FBQ1YsSUFBSSxPQUFPLElBQUksQ0FBQ0osT0FBTyxLQUFLLFdBQVc7WUFDckMsT0FBTyxJQUFJLENBQUNBLE9BQU87UUFDckIsRUFBRSxxREFBcUQ7UUFHdkQsSUFBSSxPQUFPSyxhQUFhLGFBQWE7WUFDbkMsT0FBTztRQUNUO1FBRUEsT0FBTztZQUFDUDtZQUFXO1lBQVc7U0FBWSxDQUFDUSxRQUFRLENBQUNELFNBQVNFLGVBQWU7SUFDOUU7QUFFRjtBQUNBLE1BQU1DLGVBQWUsSUFBSXpCO0FBRWEsQ0FDdEMseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFuZGluZy8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9saWIvZm9jdXNNYW5hZ2VyLm1qcz8wOGYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJhYmxlLm1qcyc7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY2xhc3MgRm9jdXNNYW5hZ2VyIGV4dGVuZHMgU3Vic2NyaWJhYmxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc2V0dXAgPSBvbkZvY3VzID0+IHtcbiAgICAgIC8vIGFkZEV2ZW50TGlzdGVuZXIgZG9lcyBub3QgZXhpc3QgaW4gUmVhY3QgTmF0aXZlLCBidXQgd2luZG93IGRvZXNcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG4gICAgICBpZiAoIWlzU2VydmVyICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4gb25Gb2N1cygpOyAvLyBMaXN0ZW4gdG8gdmlzaWJpbGxpdHljaGFuZ2UgYW5kIGZvY3VzXG5cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgLy8gQmUgc3VyZSB0byB1bnN1YnNjcmliZSBpZiBhIG5ldyBoYW5kbGVyIGlzIHNldFxuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgbGlzdGVuZXIpO1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgb25TdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmNsZWFudXApIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLnNldHVwKTtcbiAgICB9XG4gIH1cblxuICBvblVuc3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgdmFyIF90aGlzJGNsZWFudXA7XG5cbiAgICAgIChfdGhpcyRjbGVhbnVwID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5jbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXIoc2V0dXApIHtcbiAgICB2YXIgX3RoaXMkY2xlYW51cDI7XG5cbiAgICB0aGlzLnNldHVwID0gc2V0dXA7XG4gICAgKF90aGlzJGNsZWFudXAyID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cDIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmNsZWFudXAgPSBzZXR1cChmb2N1c2VkID0+IHtcbiAgICAgIGlmICh0eXBlb2YgZm9jdXNlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRoaXMuc2V0Rm9jdXNlZChmb2N1c2VkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25Gb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2V0Rm9jdXNlZChmb2N1c2VkKSB7XG4gICAgdGhpcy5mb2N1c2VkID0gZm9jdXNlZDtcblxuICAgIGlmIChmb2N1c2VkKSB7XG4gICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBvbkZvY3VzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzRm9jdXNlZCgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZm9jdXNlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb2N1c2VkO1xuICAgIH0gLy8gZG9jdW1lbnQgZ2xvYmFsIGNhbiBiZSB1bmF2YWlsYWJsZSBpbiByZWFjdCBuYXRpdmVcblxuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBbdW5kZWZpbmVkLCAndmlzaWJsZScsICdwcmVyZW5kZXInXS5pbmNsdWRlcyhkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUpO1xuICB9XG5cbn1cbmNvbnN0IGZvY3VzTWFuYWdlciA9IG5ldyBGb2N1c01hbmFnZXIoKTtcblxuZXhwb3J0IHsgRm9jdXNNYW5hZ2VyLCBmb2N1c01hbmFnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvY3VzTWFuYWdlci5tanMubWFwXG4iXSwibmFtZXMiOlsiU3Vic2NyaWJhYmxlIiwiaXNTZXJ2ZXIiLCJGb2N1c01hbmFnZXIiLCJjb25zdHJ1Y3RvciIsInNldHVwIiwib25Gb2N1cyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvblN1YnNjcmliZSIsImNsZWFudXAiLCJzZXRFdmVudExpc3RlbmVyIiwib25VbnN1YnNjcmliZSIsImhhc0xpc3RlbmVycyIsIl90aGlzJGNsZWFudXAiLCJjYWxsIiwidW5kZWZpbmVkIiwiX3RoaXMkY2xlYW51cDIiLCJmb2N1c2VkIiwic2V0Rm9jdXNlZCIsImxpc3RlbmVycyIsImZvckVhY2giLCJpc0ZvY3VzZWQiLCJkb2N1bWVudCIsImluY2x1ZGVzIiwidmlzaWJpbGl0eVN0YXRlIiwiZm9jdXNNYW5hZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNextPageParam: () => (/* binding */ getNextPageParam),\n/* harmony export */   getPreviousPageParam: () => (/* binding */ getPreviousPageParam),\n/* harmony export */   hasNextPage: () => (/* binding */ hasNextPage),\n/* harmony export */   hasPreviousPage: () => (/* binding */ hasPreviousPage),\n/* harmony export */   infiniteQueryBehavior: () => (/* binding */ infiniteQueryBehavior)\n/* harmony export */ });\nfunction infiniteQueryBehavior() {\n    return {\n        onFetch: (context)=>{\n            context.fetchFn = ()=>{\n                var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n                const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n                const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n                const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n                const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === \"forward\";\n                const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === \"backward\";\n                const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n                const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n                let newPageParams = oldPageParams;\n                let cancelled = false;\n                const addSignalProperty = (object)=>{\n                    Object.defineProperty(object, \"signal\", {\n                        enumerable: true,\n                        get: ()=>{\n                            var _context$signal;\n                            if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                                cancelled = true;\n                            } else {\n                                var _context$signal2;\n                                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener(\"abort\", ()=>{\n                                    cancelled = true;\n                                });\n                            }\n                            return context.signal;\n                        }\n                    });\n                }; // Get query function\n                const queryFn = context.options.queryFn || (()=>Promise.reject(\"Missing queryFn\"));\n                const buildNewPages = (pages, param, page, previous)=>{\n                    newPageParams = previous ? [\n                        param,\n                        ...newPageParams\n                    ] : [\n                        ...newPageParams,\n                        param\n                    ];\n                    return previous ? [\n                        page,\n                        ...pages\n                    ] : [\n                        ...pages,\n                        page\n                    ];\n                }; // Create function to fetch a page\n                const fetchPage = (pages, manual, param, previous)=>{\n                    if (cancelled) {\n                        return Promise.reject(\"Cancelled\");\n                    }\n                    if (typeof param === \"undefined\" && !manual && pages.length) {\n                        return Promise.resolve(pages);\n                    }\n                    const queryFnContext = {\n                        queryKey: context.queryKey,\n                        pageParam: param,\n                        meta: context.options.meta\n                    };\n                    addSignalProperty(queryFnContext);\n                    const queryFnResult = queryFn(queryFnContext);\n                    const promise = Promise.resolve(queryFnResult).then((page)=>buildNewPages(pages, param, page, previous));\n                    return promise;\n                };\n                let promise; // Fetch first page?\n                if (!oldPages.length) {\n                    promise = fetchPage([]);\n                } else if (isFetchingNextPage) {\n                    const manual = typeof pageParam !== \"undefined\";\n                    const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n                    promise = fetchPage(oldPages, manual, param);\n                } else if (isFetchingPreviousPage) {\n                    const manual = typeof pageParam !== \"undefined\";\n                    const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n                    promise = fetchPage(oldPages, manual, param, true);\n                } else {\n                    newPageParams = [];\n                    const manual = typeof context.options.getNextPageParam === \"undefined\";\n                    const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n                    promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n                    for(let i = 1; i < oldPages.length; i++){\n                        promise = promise.then((pages)=>{\n                            const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n                            if (shouldFetchNextPage) {\n                                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                                return fetchPage(pages, manual, param);\n                            }\n                            return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n                        });\n                    }\n                }\n                const finalPromise = promise.then((pages)=>({\n                        pages,\n                        pageParams: newPageParams\n                    }));\n                return finalPromise;\n            };\n        }\n    };\n}\nfunction getNextPageParam(options, pages) {\n    return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nfunction getPreviousPageParam(options, pages) {\n    return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */ function hasNextPage(options, pages) {\n    if (options.getNextPageParam && Array.isArray(pages)) {\n        const nextPageParam = getNextPageParam(options, pages);\n        return typeof nextPageParam !== \"undefined\" && nextPageParam !== null && nextPageParam !== false;\n    }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */ function hasPreviousPage(options, pages) {\n    if (options.getPreviousPageParam && Array.isArray(pages)) {\n        const previousPageParam = getPreviousPageParam(options, pages);\n        return typeof previousPageParam !== \"undefined\" && previousPageParam !== null && previousPageParam !== false;\n    }\n}\n //# sourceMappingURL=infiniteQueryBehavior.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/logger.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/logger.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultLogger: () => (/* binding */ defaultLogger)\n/* harmony export */ });\nconst defaultLogger = console;\n //# sourceMappingURL=logger.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL2xvZ2dlci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGdCQUFnQkM7QUFFRyxDQUN6QixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYW5kaW5nLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9sb2dnZXIubWpzPzQwMDIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdExvZ2dlciA9IGNvbnNvbGU7XG5cbmV4cG9ydCB7IGRlZmF1bHRMb2dnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5tanMubWFwXG4iXSwibmFtZXMiOlsiZGVmYXVsdExvZ2dlciIsImNvbnNvbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/logger.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/mutation.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/mutation.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mutation: () => (/* binding */ Mutation),\n/* harmony export */   getDefaultState: () => (/* binding */ getDefaultState)\n/* harmony export */ });\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/logger.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _removable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/removable.mjs\");\n/* harmony import */ var _retryer_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./retryer.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/retryer.mjs\");\n\n\n\n\n// CLASS\nclass Mutation extends _removable_mjs__WEBPACK_IMPORTED_MODULE_0__.Removable {\n    constructor(config){\n        super();\n        this.options = {\n            ...config.defaultOptions,\n            ...config.options\n        };\n        this.mutationId = config.mutationId;\n        this.mutationCache = config.mutationCache;\n        this.logger = config.logger || _logger_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultLogger;\n        this.observers = [];\n        this.state = config.state || getDefaultState();\n        this.updateCacheTime(this.options.cacheTime);\n        this.scheduleGc();\n    }\n    get meta() {\n        return this.options.meta;\n    }\n    setState(state) {\n        this.dispatch({\n            type: \"setState\",\n            state\n        });\n    }\n    addObserver(observer) {\n        if (this.observers.indexOf(observer) === -1) {\n            this.observers.push(observer); // Stop the mutation from being garbage collected\n            this.clearGcTimeout();\n            this.mutationCache.notify({\n                type: \"observerAdded\",\n                mutation: this,\n                observer\n            });\n        }\n    }\n    removeObserver(observer) {\n        this.observers = this.observers.filter((x)=>x !== observer);\n        this.scheduleGc();\n        this.mutationCache.notify({\n            type: \"observerRemoved\",\n            mutation: this,\n            observer\n        });\n    }\n    optionalRemove() {\n        if (!this.observers.length) {\n            if (this.state.status === \"loading\") {\n                this.scheduleGc();\n            } else {\n                this.mutationCache.remove(this);\n            }\n        }\n    }\n    continue() {\n        if (this.retryer) {\n            this.retryer.continue();\n            return this.retryer.promise;\n        }\n        return this.execute();\n    }\n    async execute() {\n        const executeMutation = ()=>{\n            var _this$options$retry;\n            this.retryer = (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_2__.createRetryer)({\n                fn: ()=>{\n                    if (!this.options.mutationFn) {\n                        return Promise.reject(\"No mutationFn found\");\n                    }\n                    return this.options.mutationFn(this.state.variables);\n                },\n                onFail: (failureCount, error)=>{\n                    this.dispatch({\n                        type: \"failed\",\n                        failureCount,\n                        error\n                    });\n                },\n                onPause: ()=>{\n                    this.dispatch({\n                        type: \"pause\"\n                    });\n                },\n                onContinue: ()=>{\n                    this.dispatch({\n                        type: \"continue\"\n                    });\n                },\n                retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n                retryDelay: this.options.retryDelay,\n                networkMode: this.options.networkMode\n            });\n            return this.retryer.promise;\n        };\n        const restored = this.state.status === \"loading\";\n        try {\n            var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$options$onSettl, _this$options3;\n            if (!restored) {\n                var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n                this.dispatch({\n                    type: \"loading\",\n                    variables: this.options.variables\n                }); // Notify cache callback\n                await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n                const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n                if (context !== this.state.context) {\n                    this.dispatch({\n                        type: \"loading\",\n                        context,\n                        variables: this.state.variables\n                    });\n                }\n            }\n            const data = await executeMutation(); // Notify cache callback\n            await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n            await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));\n            await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n            this.dispatch({\n                type: \"success\",\n                data\n            });\n            return data;\n        } catch (error) {\n            try {\n                var _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onError, _this$options4, _this$options$onSettl2, _this$options5;\n                // Notify cache callback\n                await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, error, this.state.variables, this.state.context, this));\n                if (true) {\n                    this.logger.error(error);\n                }\n                await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));\n                await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n                throw error;\n            } finally{\n                this.dispatch({\n                    type: \"error\",\n                    error: error\n                });\n            }\n        }\n    }\n    dispatch(action) {\n        const reducer = (state)=>{\n            switch(action.type){\n                case \"failed\":\n                    return {\n                        ...state,\n                        failureCount: action.failureCount,\n                        failureReason: action.error\n                    };\n                case \"pause\":\n                    return {\n                        ...state,\n                        isPaused: true\n                    };\n                case \"continue\":\n                    return {\n                        ...state,\n                        isPaused: false\n                    };\n                case \"loading\":\n                    return {\n                        ...state,\n                        context: action.context,\n                        data: undefined,\n                        failureCount: 0,\n                        failureReason: null,\n                        error: null,\n                        isPaused: !(0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_2__.canFetch)(this.options.networkMode),\n                        status: \"loading\",\n                        variables: action.variables\n                    };\n                case \"success\":\n                    return {\n                        ...state,\n                        data: action.data,\n                        failureCount: 0,\n                        failureReason: null,\n                        error: null,\n                        status: \"success\",\n                        isPaused: false\n                    };\n                case \"error\":\n                    return {\n                        ...state,\n                        data: undefined,\n                        error: action.error,\n                        failureCount: state.failureCount + 1,\n                        failureReason: action.error,\n                        isPaused: false,\n                        status: \"error\"\n                    };\n                case \"setState\":\n                    return {\n                        ...state,\n                        ...action.state\n                    };\n            }\n        };\n        this.state = reducer(this.state);\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.observers.forEach((observer)=>{\n                observer.onMutationUpdate(action);\n            });\n            this.mutationCache.notify({\n                mutation: this,\n                type: \"updated\",\n                action\n            });\n        });\n    }\n}\nfunction getDefaultState() {\n    return {\n        context: undefined,\n        data: undefined,\n        error: null,\n        failureCount: 0,\n        failureReason: null,\n        isPaused: false,\n        status: \"idle\",\n        variables: undefined\n    };\n}\n //# sourceMappingURL=mutation.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/mutation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationCache.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/mutationCache.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutationCache: () => (/* binding */ MutationCache)\n/* harmony export */ });\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _mutation_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mutation.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/mutation.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n\n\n\n\n// CLASS\nclass MutationCache extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(config){\n        super();\n        this.config = config || {};\n        this.mutations = [];\n        this.mutationId = 0;\n    }\n    build(client, options, state) {\n        const mutation = new _mutation_mjs__WEBPACK_IMPORTED_MODULE_1__.Mutation({\n            mutationCache: this,\n            logger: client.getLogger(),\n            mutationId: ++this.mutationId,\n            options: client.defaultMutationOptions(options),\n            state,\n            defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined\n        });\n        this.add(mutation);\n        return mutation;\n    }\n    add(mutation) {\n        this.mutations.push(mutation);\n        this.notify({\n            type: \"added\",\n            mutation\n        });\n    }\n    remove(mutation) {\n        this.mutations = this.mutations.filter((x)=>x !== mutation);\n        this.notify({\n            type: \"removed\",\n            mutation\n        });\n    }\n    clear() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.mutations.forEach((mutation)=>{\n                this.remove(mutation);\n            });\n        });\n    }\n    getAll() {\n        return this.mutations;\n    }\n    find(filters) {\n        if (typeof filters.exact === \"undefined\") {\n            filters.exact = true;\n        }\n        return this.mutations.find((mutation)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.matchMutation)(filters, mutation));\n    }\n    findAll(filters) {\n        return this.mutations.filter((mutation)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.matchMutation)(filters, mutation));\n    }\n    notify(event) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.listeners.forEach((listener)=>{\n                listener(event);\n            });\n        });\n    }\n    resumePausedMutations() {\n        const pausedMutations = this.mutations.filter((x)=>x.state.isPaused);\n        return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>pausedMutations.reduce((promise, mutation)=>promise.then(()=>mutation.continue().catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.noop)), Promise.resolve()));\n    }\n}\n //# sourceMappingURL=mutationCache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL211dGF0aW9uQ2FjaGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9EO0FBQ1Y7QUFDUTtBQUNBO0FBRWxELFFBQVE7QUFDUixNQUFNSyxzQkFBc0JELDJEQUFZQTtJQUN0Q0UsWUFBWUMsTUFBTSxDQUFFO1FBQ2xCLEtBQUs7UUFDTCxJQUFJLENBQUNBLE1BQU0sR0FBR0EsVUFBVSxDQUFDO1FBQ3pCLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEVBQUU7UUFDbkIsSUFBSSxDQUFDQyxVQUFVLEdBQUc7SUFDcEI7SUFFQUMsTUFBTUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRTtRQUM1QixNQUFNQyxXQUFXLElBQUliLG1EQUFRQSxDQUFDO1lBQzVCYyxlQUFlLElBQUk7WUFDbkJDLFFBQVFMLE9BQU9NLFNBQVM7WUFDeEJSLFlBQVksRUFBRSxJQUFJLENBQUNBLFVBQVU7WUFDN0JHLFNBQVNELE9BQU9PLHNCQUFzQixDQUFDTjtZQUN2Q0M7WUFDQU0sZ0JBQWdCUCxRQUFRUSxXQUFXLEdBQUdULE9BQU9VLG1CQUFtQixDQUFDVCxRQUFRUSxXQUFXLElBQUlFO1FBQzFGO1FBQ0EsSUFBSSxDQUFDQyxHQUFHLENBQUNUO1FBQ1QsT0FBT0E7SUFDVDtJQUVBUyxJQUFJVCxRQUFRLEVBQUU7UUFDWixJQUFJLENBQUNOLFNBQVMsQ0FBQ2dCLElBQUksQ0FBQ1Y7UUFDcEIsSUFBSSxDQUFDVyxNQUFNLENBQUM7WUFDVkMsTUFBTTtZQUNOWjtRQUNGO0lBQ0Y7SUFFQWEsT0FBT2IsUUFBUSxFQUFFO1FBQ2YsSUFBSSxDQUFDTixTQUFTLEdBQUcsSUFBSSxDQUFDQSxTQUFTLENBQUNvQixNQUFNLENBQUNDLENBQUFBLElBQUtBLE1BQU1mO1FBQ2xELElBQUksQ0FBQ1csTUFBTSxDQUFDO1lBQ1ZDLE1BQU07WUFDTlo7UUFDRjtJQUNGO0lBRUFnQixRQUFRO1FBQ045Qiw2REFBYUEsQ0FBQytCLEtBQUssQ0FBQztZQUNsQixJQUFJLENBQUN2QixTQUFTLENBQUN3QixPQUFPLENBQUNsQixDQUFBQTtnQkFDckIsSUFBSSxDQUFDYSxNQUFNLENBQUNiO1lBQ2Q7UUFDRjtJQUNGO0lBRUFtQixTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUN6QixTQUFTO0lBQ3ZCO0lBRUEwQixLQUFLQyxPQUFPLEVBQUU7UUFDWixJQUFJLE9BQU9BLFFBQVFDLEtBQUssS0FBSyxhQUFhO1lBQ3hDRCxRQUFRQyxLQUFLLEdBQUc7UUFDbEI7UUFFQSxPQUFPLElBQUksQ0FBQzVCLFNBQVMsQ0FBQzBCLElBQUksQ0FBQ3BCLENBQUFBLFdBQVlaLHlEQUFhQSxDQUFDaUMsU0FBU3JCO0lBQ2hFO0lBRUF1QixRQUFRRixPQUFPLEVBQUU7UUFDZixPQUFPLElBQUksQ0FBQzNCLFNBQVMsQ0FBQ29CLE1BQU0sQ0FBQ2QsQ0FBQUEsV0FBWVoseURBQWFBLENBQUNpQyxTQUFTckI7SUFDbEU7SUFFQVcsT0FBT2EsS0FBSyxFQUFFO1FBQ1p0Qyw2REFBYUEsQ0FBQytCLEtBQUssQ0FBQztZQUNsQixJQUFJLENBQUNRLFNBQVMsQ0FBQ1AsT0FBTyxDQUFDUSxDQUFBQTtnQkFDckJBLFNBQVNGO1lBQ1g7UUFDRjtJQUNGO0lBRUFHLHdCQUF3QjtRQUN0QixNQUFNQyxrQkFBa0IsSUFBSSxDQUFDbEMsU0FBUyxDQUFDb0IsTUFBTSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFaEIsS0FBSyxDQUFDOEIsUUFBUTtRQUNuRSxPQUFPM0MsNkRBQWFBLENBQUMrQixLQUFLLENBQUMsSUFBTVcsZ0JBQWdCRSxNQUFNLENBQUMsQ0FBQ0MsU0FBUy9CLFdBQWErQixRQUFRQyxJQUFJLENBQUMsSUFBTWhDLFNBQVNpQyxRQUFRLEdBQUdDLEtBQUssQ0FBQzdDLDRDQUFJQSxJQUFJOEMsUUFBUUMsT0FBTztJQUNySjtBQUVGO0FBRXlCLENBQ3pCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmRpbmcvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL211dGF0aW9uQ2FjaGUubWpzP2NhNTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4vbm90aWZ5TWFuYWdlci5tanMnO1xuaW1wb3J0IHsgTXV0YXRpb24gfSBmcm9tICcuL211dGF0aW9uLm1qcyc7XG5pbXBvcnQgeyBtYXRjaE11dGF0aW9uLCBub29wIH0gZnJvbSAnLi91dGlscy5tanMnO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUubWpzJztcblxuLy8gQ0xBU1NcbmNsYXNzIE11dGF0aW9uQ2FjaGUgZXh0ZW5kcyBTdWJzY3JpYmFibGUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIHRoaXMubXV0YXRpb25zID0gW107XG4gICAgdGhpcy5tdXRhdGlvbklkID0gMDtcbiAgfVxuXG4gIGJ1aWxkKGNsaWVudCwgb3B0aW9ucywgc3RhdGUpIHtcbiAgICBjb25zdCBtdXRhdGlvbiA9IG5ldyBNdXRhdGlvbih7XG4gICAgICBtdXRhdGlvbkNhY2hlOiB0aGlzLFxuICAgICAgbG9nZ2VyOiBjbGllbnQuZ2V0TG9nZ2VyKCksXG4gICAgICBtdXRhdGlvbklkOiArK3RoaXMubXV0YXRpb25JZCxcbiAgICAgIG9wdGlvbnM6IGNsaWVudC5kZWZhdWx0TXV0YXRpb25PcHRpb25zKG9wdGlvbnMpLFxuICAgICAgc3RhdGUsXG4gICAgICBkZWZhdWx0T3B0aW9uczogb3B0aW9ucy5tdXRhdGlvbktleSA/IGNsaWVudC5nZXRNdXRhdGlvbkRlZmF1bHRzKG9wdGlvbnMubXV0YXRpb25LZXkpIDogdW5kZWZpbmVkXG4gICAgfSk7XG4gICAgdGhpcy5hZGQobXV0YXRpb24pO1xuICAgIHJldHVybiBtdXRhdGlvbjtcbiAgfVxuXG4gIGFkZChtdXRhdGlvbikge1xuICAgIHRoaXMubXV0YXRpb25zLnB1c2gobXV0YXRpb24pO1xuICAgIHRoaXMubm90aWZ5KHtcbiAgICAgIHR5cGU6ICdhZGRlZCcsXG4gICAgICBtdXRhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlKG11dGF0aW9uKSB7XG4gICAgdGhpcy5tdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9ucy5maWx0ZXIoeCA9PiB4ICE9PSBtdXRhdGlvbik7XG4gICAgdGhpcy5ub3RpZnkoe1xuICAgICAgdHlwZTogJ3JlbW92ZWQnLFxuICAgICAgbXV0YXRpb25cbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goKCkgPT4ge1xuICAgICAgdGhpcy5tdXRhdGlvbnMuZm9yRWFjaChtdXRhdGlvbiA9PiB7XG4gICAgICAgIHRoaXMucmVtb3ZlKG11dGF0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0QWxsKCkge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9ucztcbiAgfVxuXG4gIGZpbmQoZmlsdGVycykge1xuICAgIGlmICh0eXBlb2YgZmlsdGVycy5leGFjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZpbHRlcnMuZXhhY3QgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm11dGF0aW9ucy5maW5kKG11dGF0aW9uID0+IG1hdGNoTXV0YXRpb24oZmlsdGVycywgbXV0YXRpb24pKTtcbiAgfVxuXG4gIGZpbmRBbGwoZmlsdGVycykge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9ucy5maWx0ZXIobXV0YXRpb24gPT4gbWF0Y2hNdXRhdGlvbihmaWx0ZXJzLCBtdXRhdGlvbikpO1xuICB9XG5cbiAgbm90aWZ5KGV2ZW50KSB7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IHtcbiAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXN1bWVQYXVzZWRNdXRhdGlvbnMoKSB7XG4gICAgY29uc3QgcGF1c2VkTXV0YXRpb25zID0gdGhpcy5tdXRhdGlvbnMuZmlsdGVyKHggPT4geC5zdGF0ZS5pc1BhdXNlZCk7XG4gICAgcmV0dXJuIG5vdGlmeU1hbmFnZXIuYmF0Y2goKCkgPT4gcGF1c2VkTXV0YXRpb25zLnJlZHVjZSgocHJvbWlzZSwgbXV0YXRpb24pID0+IHByb21pc2UudGhlbigoKSA9PiBtdXRhdGlvbi5jb250aW51ZSgpLmNhdGNoKG5vb3ApKSwgUHJvbWlzZS5yZXNvbHZlKCkpKTtcbiAgfVxuXG59XG5cbmV4cG9ydCB7IE11dGF0aW9uQ2FjaGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11dGF0aW9uQ2FjaGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIm5vdGlmeU1hbmFnZXIiLCJNdXRhdGlvbiIsIm1hdGNoTXV0YXRpb24iLCJub29wIiwiU3Vic2NyaWJhYmxlIiwiTXV0YXRpb25DYWNoZSIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwibXV0YXRpb25zIiwibXV0YXRpb25JZCIsImJ1aWxkIiwiY2xpZW50Iiwib3B0aW9ucyIsInN0YXRlIiwibXV0YXRpb24iLCJtdXRhdGlvbkNhY2hlIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiZGVmYXVsdE11dGF0aW9uT3B0aW9ucyIsImRlZmF1bHRPcHRpb25zIiwibXV0YXRpb25LZXkiLCJnZXRNdXRhdGlvbkRlZmF1bHRzIiwidW5kZWZpbmVkIiwiYWRkIiwicHVzaCIsIm5vdGlmeSIsInR5cGUiLCJyZW1vdmUiLCJmaWx0ZXIiLCJ4IiwiY2xlYXIiLCJiYXRjaCIsImZvckVhY2giLCJnZXRBbGwiLCJmaW5kIiwiZmlsdGVycyIsImV4YWN0IiwiZmluZEFsbCIsImV2ZW50IiwibGlzdGVuZXJzIiwibGlzdGVuZXIiLCJyZXN1bWVQYXVzZWRNdXRhdGlvbnMiLCJwYXVzZWRNdXRhdGlvbnMiLCJpc1BhdXNlZCIsInJlZHVjZSIsInByb21pc2UiLCJ0aGVuIiwiY29udGludWUiLCJjYXRjaCIsIlByb21pc2UiLCJyZXNvbHZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationCache.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutationObserver: () => (/* binding */ MutationObserver)\n/* harmony export */ });\n/* harmony import */ var _mutation_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mutation.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/mutation.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\n\n\n// CLASS\nclass MutationObserver extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(client, options){\n        super();\n        this.client = client;\n        this.setOptions(options);\n        this.bindMethods();\n        this.updateResult();\n    }\n    bindMethods() {\n        this.mutate = this.mutate.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n    setOptions(options) {\n        const prevOptions = this.options;\n        this.options = this.client.defaultMutationOptions(options);\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(prevOptions, this.options)) {\n            this.client.getMutationCache().notify({\n                type: \"observerOptionsUpdated\",\n                mutation: this.currentMutation,\n                observer: this\n            });\n        }\n    }\n    onUnsubscribe() {\n        if (!this.listeners.length) {\n            var _this$currentMutation;\n            (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n        }\n    }\n    onMutationUpdate(action) {\n        this.updateResult(); // Determine which callbacks to trigger\n        const notifyOptions = {\n            listeners: true\n        };\n        if (action.type === \"success\") {\n            notifyOptions.onSuccess = true;\n        } else if (action.type === \"error\") {\n            notifyOptions.onError = true;\n        }\n        this.notify(notifyOptions);\n    }\n    getCurrentResult() {\n        return this.currentResult;\n    }\n    reset() {\n        this.currentMutation = undefined;\n        this.updateResult();\n        this.notify({\n            listeners: true\n        });\n    }\n    mutate(variables, options) {\n        this.mutateOptions = options;\n        if (this.currentMutation) {\n            this.currentMutation.removeObserver(this);\n        }\n        this.currentMutation = this.client.getMutationCache().build(this.client, {\n            ...this.options,\n            variables: typeof variables !== \"undefined\" ? variables : this.options.variables\n        });\n        this.currentMutation.addObserver(this);\n        return this.currentMutation.execute();\n    }\n    updateResult() {\n        const state = this.currentMutation ? this.currentMutation.state : (0,_mutation_mjs__WEBPACK_IMPORTED_MODULE_2__.getDefaultState)();\n        const result = {\n            ...state,\n            isLoading: state.status === \"loading\",\n            isSuccess: state.status === \"success\",\n            isError: state.status === \"error\",\n            isIdle: state.status === \"idle\",\n            mutate: this.mutate,\n            reset: this.reset\n        };\n        this.currentResult = result;\n    }\n    notify(options) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            // First trigger the mutate callbacks\n            if (this.mutateOptions) {\n                if (options.onSuccess) {\n                    var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n                    (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n                    (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n                } else if (options.onError) {\n                    var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n                    (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n                    (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n                }\n            } // Then trigger the listeners\n            if (options.listeners) {\n                this.listeners.forEach((listener)=>{\n                    listener(this.currentResult);\n                });\n            }\n        });\n    }\n}\n //# sourceMappingURL=mutationObserver.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNotifyManager: () => (/* binding */ createNotifyManager),\n/* harmony export */   notifyManager: () => (/* binding */ notifyManager)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\nfunction createNotifyManager() {\n    let queue = [];\n    let transactions = 0;\n    let notifyFn = (callback)=>{\n        callback();\n    };\n    let batchNotifyFn = (callback)=>{\n        callback();\n    };\n    const batch = (callback)=>{\n        let result;\n        transactions++;\n        try {\n            result = callback();\n        } finally{\n            transactions--;\n            if (!transactions) {\n                flush();\n            }\n        }\n        return result;\n    };\n    const schedule = (callback)=>{\n        if (transactions) {\n            queue.push(callback);\n        } else {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.scheduleMicrotask)(()=>{\n                notifyFn(callback);\n            });\n        }\n    };\n    /**\n   * All calls to the wrapped function will be batched.\n   */ const batchCalls = (callback)=>{\n        return (...args)=>{\n            schedule(()=>{\n                callback(...args);\n            });\n        };\n    };\n    const flush = ()=>{\n        const originalQueue = queue;\n        queue = [];\n        if (originalQueue.length) {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.scheduleMicrotask)(()=>{\n                batchNotifyFn(()=>{\n                    originalQueue.forEach((callback)=>{\n                        notifyFn(callback);\n                    });\n                });\n            });\n        }\n    };\n    /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */ const setNotifyFunction = (fn)=>{\n        notifyFn = fn;\n    };\n    /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */ const setBatchNotifyFunction = (fn)=>{\n        batchNotifyFn = fn;\n    };\n    return {\n        batch,\n        batchCalls,\n        schedule,\n        setNotifyFunction,\n        setBatchNotifyFunction\n    };\n} // SINGLETON\nconst notifyManager = createNotifyManager();\n //# sourceMappingURL=notifyManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL25vdGlmeU1hbmFnZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDtBQUVoRCxTQUFTQztJQUNQLElBQUlDLFFBQVEsRUFBRTtJQUNkLElBQUlDLGVBQWU7SUFFbkIsSUFBSUMsV0FBV0MsQ0FBQUE7UUFDYkE7SUFDRjtJQUVBLElBQUlDLGdCQUFnQkQsQ0FBQUE7UUFDbEJBO0lBQ0Y7SUFFQSxNQUFNRSxRQUFRRixDQUFBQTtRQUNaLElBQUlHO1FBQ0pMO1FBRUEsSUFBSTtZQUNGSyxTQUFTSDtRQUNYLFNBQVU7WUFDUkY7WUFFQSxJQUFJLENBQUNBLGNBQWM7Z0JBQ2pCTTtZQUNGO1FBQ0Y7UUFFQSxPQUFPRDtJQUNUO0lBRUEsTUFBTUUsV0FBV0wsQ0FBQUE7UUFDZixJQUFJRixjQUFjO1lBQ2hCRCxNQUFNUyxJQUFJLENBQUNOO1FBQ2IsT0FBTztZQUNMTCw2REFBaUJBLENBQUM7Z0JBQ2hCSSxTQUFTQztZQUNYO1FBQ0Y7SUFDRjtJQUNBOztHQUVDLEdBR0QsTUFBTU8sYUFBYVAsQ0FBQUE7UUFDakIsT0FBTyxDQUFDLEdBQUdRO1lBQ1RILFNBQVM7Z0JBQ1BMLFlBQVlRO1lBQ2Q7UUFDRjtJQUNGO0lBRUEsTUFBTUosUUFBUTtRQUNaLE1BQU1LLGdCQUFnQlo7UUFDdEJBLFFBQVEsRUFBRTtRQUVWLElBQUlZLGNBQWNDLE1BQU0sRUFBRTtZQUN4QmYsNkRBQWlCQSxDQUFDO2dCQUNoQk0sY0FBYztvQkFDWlEsY0FBY0UsT0FBTyxDQUFDWCxDQUFBQTt3QkFDcEJELFNBQVNDO29CQUNYO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBQ0E7OztHQUdDLEdBR0QsTUFBTVksb0JBQW9CQyxDQUFBQTtRQUN4QmQsV0FBV2M7SUFDYjtJQUNBOzs7R0FHQyxHQUdELE1BQU1DLHlCQUF5QkQsQ0FBQUE7UUFDN0JaLGdCQUFnQlk7SUFDbEI7SUFFQSxPQUFPO1FBQ0xYO1FBQ0FLO1FBQ0FGO1FBQ0FPO1FBQ0FFO0lBQ0Y7QUFDRixFQUFFLFlBQVk7QUFFZCxNQUFNQyxnQkFBZ0JuQjtBQUV3QixDQUM5QywwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYW5kaW5nLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9ub3RpZnlNYW5hZ2VyLm1qcz9jZWRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjaGVkdWxlTWljcm90YXNrIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVOb3RpZnlNYW5hZ2VyKCkge1xuICBsZXQgcXVldWUgPSBbXTtcbiAgbGV0IHRyYW5zYWN0aW9ucyA9IDA7XG5cbiAgbGV0IG5vdGlmeUZuID0gY2FsbGJhY2sgPT4ge1xuICAgIGNhbGxiYWNrKCk7XG4gIH07XG5cbiAgbGV0IGJhdGNoTm90aWZ5Rm4gPSBjYWxsYmFjayA9PiB7XG4gICAgY2FsbGJhY2soKTtcbiAgfTtcblxuICBjb25zdCBiYXRjaCA9IGNhbGxiYWNrID0+IHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyYW5zYWN0aW9ucysrO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyYW5zYWN0aW9ucy0tO1xuXG4gICAgICBpZiAoIXRyYW5zYWN0aW9ucykge1xuICAgICAgICBmbHVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgY29uc3Qgc2NoZWR1bGUgPSBjYWxsYmFjayA9PiB7XG4gICAgaWYgKHRyYW5zYWN0aW9ucykge1xuICAgICAgcXVldWUucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgbm90aWZ5Rm4oY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogQWxsIGNhbGxzIHRvIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIHdpbGwgYmUgYmF0Y2hlZC5cbiAgICovXG5cblxuICBjb25zdCBiYXRjaENhbGxzID0gY2FsbGJhY2sgPT4ge1xuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgc2NoZWR1bGUoKCkgPT4ge1xuICAgICAgICBjYWxsYmFjayguLi5hcmdzKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgY29uc3QgZmx1c2ggPSAoKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxRdWV1ZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gW107XG5cbiAgICBpZiAob3JpZ2luYWxRdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHNjaGVkdWxlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgYmF0Y2hOb3RpZnlGbigoKSA9PiB7XG4gICAgICAgICAgb3JpZ2luYWxRdWV1ZS5mb3JFYWNoKGNhbGxiYWNrID0+IHtcbiAgICAgICAgICAgIG5vdGlmeUZuKGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gc2V0IGEgY3VzdG9tIG5vdGlmeSBmdW5jdGlvbi5cbiAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBmb3IgZXhhbXBsZSB3cmFwIG5vdGlmaWNhdGlvbnMgd2l0aCBgUmVhY3QuYWN0YCB3aGlsZSBydW5uaW5nIHRlc3RzLlxuICAgKi9cblxuXG4gIGNvbnN0IHNldE5vdGlmeUZ1bmN0aW9uID0gZm4gPT4ge1xuICAgIG5vdGlmeUZuID0gZm47XG4gIH07XG4gIC8qKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gc2V0IGEgY3VzdG9tIGZ1bmN0aW9uIHRvIGJhdGNoIG5vdGlmaWNhdGlvbnMgdG9nZXRoZXIgaW50byBhIHNpbmdsZSB0aWNrLlxuICAgKiBCeSBkZWZhdWx0IFJlYWN0IFF1ZXJ5IHdpbGwgdXNlIHRoZSBiYXRjaCBmdW5jdGlvbiBwcm92aWRlZCBieSBSZWFjdERPTSBvciBSZWFjdCBOYXRpdmUuXG4gICAqL1xuXG5cbiAgY29uc3Qgc2V0QmF0Y2hOb3RpZnlGdW5jdGlvbiA9IGZuID0+IHtcbiAgICBiYXRjaE5vdGlmeUZuID0gZm47XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBiYXRjaCxcbiAgICBiYXRjaENhbGxzLFxuICAgIHNjaGVkdWxlLFxuICAgIHNldE5vdGlmeUZ1bmN0aW9uLFxuICAgIHNldEJhdGNoTm90aWZ5RnVuY3Rpb25cbiAgfTtcbn0gLy8gU0lOR0xFVE9OXG5cbmNvbnN0IG5vdGlmeU1hbmFnZXIgPSBjcmVhdGVOb3RpZnlNYW5hZ2VyKCk7XG5cbmV4cG9ydCB7IGNyZWF0ZU5vdGlmeU1hbmFnZXIsIG5vdGlmeU1hbmFnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vdGlmeU1hbmFnZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbInNjaGVkdWxlTWljcm90YXNrIiwiY3JlYXRlTm90aWZ5TWFuYWdlciIsInF1ZXVlIiwidHJhbnNhY3Rpb25zIiwibm90aWZ5Rm4iLCJjYWxsYmFjayIsImJhdGNoTm90aWZ5Rm4iLCJiYXRjaCIsInJlc3VsdCIsImZsdXNoIiwic2NoZWR1bGUiLCJwdXNoIiwiYmF0Y2hDYWxscyIsImFyZ3MiLCJvcmlnaW5hbFF1ZXVlIiwibGVuZ3RoIiwiZm9yRWFjaCIsInNldE5vdGlmeUZ1bmN0aW9uIiwiZm4iLCJzZXRCYXRjaE5vdGlmeUZ1bmN0aW9uIiwibm90aWZ5TWFuYWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnlineManager: () => (/* binding */ OnlineManager),\n/* harmony export */   onlineManager: () => (/* binding */ onlineManager)\n/* harmony export */ });\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\nclass OnlineManager extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(){\n        super();\n        this.setup = (onOnline)=>{\n            // addEventListener does not exist in React Native, but window does\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer && window.addEventListener) {\n                const listener = ()=>onOnline(); // Listen to online\n                window.addEventListener(\"online\", listener, false);\n                window.addEventListener(\"offline\", listener, false);\n                return ()=>{\n                    // Be sure to unsubscribe if a new handler is set\n                    window.removeEventListener(\"online\", listener);\n                    window.removeEventListener(\"offline\", listener);\n                };\n            }\n        };\n    }\n    onSubscribe() {\n        if (!this.cleanup) {\n            this.setEventListener(this.setup);\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            var _this$cleanup;\n            (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n            this.cleanup = undefined;\n        }\n    }\n    setEventListener(setup) {\n        var _this$cleanup2;\n        this.setup = setup;\n        (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n        this.cleanup = setup((online)=>{\n            if (typeof online === \"boolean\") {\n                this.setOnline(online);\n            } else {\n                this.onOnline();\n            }\n        });\n    }\n    setOnline(online) {\n        this.online = online;\n        if (online) {\n            this.onOnline();\n        }\n    }\n    onOnline() {\n        this.listeners.forEach((listener)=>{\n            listener();\n        });\n    }\n    isOnline() {\n        if (typeof this.online === \"boolean\") {\n            return this.online;\n        }\n        if (typeof navigator === \"undefined\" || typeof navigator.onLine === \"undefined\") {\n            return true;\n        }\n        return navigator.onLine;\n    }\n}\nconst onlineManager = new OnlineManager();\n //# sourceMappingURL=onlineManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL29ubGluZU1hbmFnZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0Q7QUFDWDtBQUV2QyxNQUFNRSxzQkFBc0JGLDJEQUFZQTtJQUN0Q0csYUFBYztRQUNaLEtBQUs7UUFFTCxJQUFJLENBQUNDLEtBQUssR0FBR0MsQ0FBQUE7WUFDWCxtRUFBbUU7WUFDbkUsdUVBQXVFO1lBQ3ZFLElBQUksQ0FBQ0osZ0RBQVFBLElBQUlLLE9BQU9DLGdCQUFnQixFQUFFO2dCQUN4QyxNQUFNQyxXQUFXLElBQU1ILFlBQVksbUJBQW1CO2dCQUd0REMsT0FBT0MsZ0JBQWdCLENBQUMsVUFBVUMsVUFBVTtnQkFDNUNGLE9BQU9DLGdCQUFnQixDQUFDLFdBQVdDLFVBQVU7Z0JBQzdDLE9BQU87b0JBQ0wsaURBQWlEO29CQUNqREYsT0FBT0csbUJBQW1CLENBQUMsVUFBVUQ7b0JBQ3JDRixPQUFPRyxtQkFBbUIsQ0FBQyxXQUFXRDtnQkFDeEM7WUFDRjtRQUNGO0lBQ0Y7SUFFQUUsY0FBYztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUNDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUNDLGdCQUFnQixDQUFDLElBQUksQ0FBQ1IsS0FBSztRQUNsQztJQUNGO0lBRUFTLGdCQUFnQjtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUNDLFlBQVksSUFBSTtZQUN4QixJQUFJQztZQUVIQSxDQUFBQSxnQkFBZ0IsSUFBSSxDQUFDSixPQUFPLEtBQUssT0FBTyxLQUFLLElBQUlJLGNBQWNDLElBQUksQ0FBQyxJQUFJO1lBQ3pFLElBQUksQ0FBQ0wsT0FBTyxHQUFHTTtRQUNqQjtJQUNGO0lBRUFMLGlCQUFpQlIsS0FBSyxFQUFFO1FBQ3RCLElBQUljO1FBRUosSUFBSSxDQUFDZCxLQUFLLEdBQUdBO1FBQ1pjLENBQUFBLGlCQUFpQixJQUFJLENBQUNQLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSU8sZUFBZUYsSUFBSSxDQUFDLElBQUk7UUFDM0UsSUFBSSxDQUFDTCxPQUFPLEdBQUdQLE1BQU1lLENBQUFBO1lBQ25CLElBQUksT0FBT0EsV0FBVyxXQUFXO2dCQUMvQixJQUFJLENBQUNDLFNBQVMsQ0FBQ0Q7WUFDakIsT0FBTztnQkFDTCxJQUFJLENBQUNkLFFBQVE7WUFDZjtRQUNGO0lBQ0Y7SUFFQWUsVUFBVUQsTUFBTSxFQUFFO1FBQ2hCLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtRQUVkLElBQUlBLFFBQVE7WUFDVixJQUFJLENBQUNkLFFBQVE7UUFDZjtJQUNGO0lBRUFBLFdBQVc7UUFDVCxJQUFJLENBQUNnQixTQUFTLENBQUNDLE9BQU8sQ0FBQ2QsQ0FBQUE7WUFDckJBO1FBQ0Y7SUFDRjtJQUVBZSxXQUFXO1FBQ1QsSUFBSSxPQUFPLElBQUksQ0FBQ0osTUFBTSxLQUFLLFdBQVc7WUFDcEMsT0FBTyxJQUFJLENBQUNBLE1BQU07UUFDcEI7UUFFQSxJQUFJLE9BQU9LLGNBQWMsZUFBZSxPQUFPQSxVQUFVQyxNQUFNLEtBQUssYUFBYTtZQUMvRSxPQUFPO1FBQ1Q7UUFFQSxPQUFPRCxVQUFVQyxNQUFNO0lBQ3pCO0FBRUY7QUFDQSxNQUFNQyxnQkFBZ0IsSUFBSXhCO0FBRWMsQ0FDeEMsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFuZGluZy8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9saWIvb25saW5lTWFuYWdlci5tanM/MmFhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZS5tanMnO1xuaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNsYXNzIE9ubGluZU1hbmFnZXIgZXh0ZW5kcyBTdWJzY3JpYmFibGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5zZXR1cCA9IG9uT25saW5lID0+IHtcbiAgICAgIC8vIGFkZEV2ZW50TGlzdGVuZXIgZG9lcyBub3QgZXhpc3QgaW4gUmVhY3QgTmF0aXZlLCBidXQgd2luZG93IGRvZXNcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG4gICAgICBpZiAoIWlzU2VydmVyICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4gb25PbmxpbmUoKTsgLy8gTGlzdGVuIHRvIG9ubGluZVxuXG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubGluZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAvLyBCZSBzdXJlIHRvIHVuc3Vic2NyaWJlIGlmIGEgbmV3IGhhbmRsZXIgaXMgc2V0XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29ubGluZScsIGxpc3RlbmVyKTtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgb25TdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmNsZWFudXApIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLnNldHVwKTtcbiAgICB9XG4gIH1cblxuICBvblVuc3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgdmFyIF90aGlzJGNsZWFudXA7XG5cbiAgICAgIChfdGhpcyRjbGVhbnVwID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5jbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXIoc2V0dXApIHtcbiAgICB2YXIgX3RoaXMkY2xlYW51cDI7XG5cbiAgICB0aGlzLnNldHVwID0gc2V0dXA7XG4gICAgKF90aGlzJGNsZWFudXAyID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cDIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmNsZWFudXAgPSBzZXR1cChvbmxpbmUgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvbmxpbmUgPT09ICdib29sZWFuJykge1xuICAgICAgICB0aGlzLnNldE9ubGluZShvbmxpbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbk9ubGluZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2V0T25saW5lKG9ubGluZSkge1xuICAgIHRoaXMub25saW5lID0gb25saW5lO1xuXG4gICAgaWYgKG9ubGluZSkge1xuICAgICAgdGhpcy5vbk9ubGluZSgpO1xuICAgIH1cbiAgfVxuXG4gIG9uT25saW5lKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzT25saW5lKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5vbmxpbmUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHRoaXMub25saW5lO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgbmF2aWdhdG9yLm9uTGluZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBuYXZpZ2F0b3Iub25MaW5lO1xuICB9XG5cbn1cbmNvbnN0IG9ubGluZU1hbmFnZXIgPSBuZXcgT25saW5lTWFuYWdlcigpO1xuXG5leHBvcnQgeyBPbmxpbmVNYW5hZ2VyLCBvbmxpbmVNYW5hZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbmxpbmVNYW5hZ2VyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJTdWJzY3JpYmFibGUiLCJpc1NlcnZlciIsIk9ubGluZU1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsInNldHVwIiwib25PbmxpbmUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwibGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25TdWJzY3JpYmUiLCJjbGVhbnVwIiwic2V0RXZlbnRMaXN0ZW5lciIsIm9uVW5zdWJzY3JpYmUiLCJoYXNMaXN0ZW5lcnMiLCJfdGhpcyRjbGVhbnVwIiwiY2FsbCIsInVuZGVmaW5lZCIsIl90aGlzJGNsZWFudXAyIiwib25saW5lIiwic2V0T25saW5lIiwibGlzdGVuZXJzIiwiZm9yRWFjaCIsImlzT25saW5lIiwibmF2aWdhdG9yIiwib25MaW5lIiwib25saW5lTWFuYWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/query.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/query.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Query: () => (/* binding */ Query)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/logger.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _retryer_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./retryer.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/retryer.mjs\");\n/* harmony import */ var _removable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/removable.mjs\");\n\n\n\n\n\n// CLASS\nclass Query extends _removable_mjs__WEBPACK_IMPORTED_MODULE_0__.Removable {\n    constructor(config){\n        super();\n        this.abortSignalConsumed = false;\n        this.defaultOptions = config.defaultOptions;\n        this.setOptions(config.options);\n        this.observers = [];\n        this.cache = config.cache;\n        this.logger = config.logger || _logger_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultLogger;\n        this.queryKey = config.queryKey;\n        this.queryHash = config.queryHash;\n        this.initialState = config.state || getDefaultState(this.options);\n        this.state = this.initialState;\n    }\n    get meta() {\n        return this.options.meta;\n    }\n    setOptions(options) {\n        this.options = {\n            ...this.defaultOptions,\n            ...options\n        };\n        this.updateCacheTime(this.options.cacheTime);\n    }\n    optionalRemove() {\n        if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n            this.cache.remove(this);\n        }\n    }\n    setData(newData, options) {\n        const data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.replaceData)(this.state.data, newData, this.options); // Set data and mark it as cached\n        this.dispatch({\n            data,\n            type: \"success\",\n            dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n            manual: options == null ? void 0 : options.manual\n        });\n        return data;\n    }\n    setState(state, setStateOptions) {\n        this.dispatch({\n            type: \"setState\",\n            state,\n            setStateOptions\n        });\n    }\n    cancel(options) {\n        var _this$retryer;\n        const promise = this.promise;\n        (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n        return promise ? promise.then(_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.noop) : Promise.resolve();\n    }\n    destroy() {\n        super.destroy();\n        this.cancel({\n            silent: true\n        });\n    }\n    reset() {\n        this.destroy();\n        this.setState(this.initialState);\n    }\n    isActive() {\n        return this.observers.some((observer)=>observer.options.enabled !== false);\n    }\n    isDisabled() {\n        return this.getObserversCount() > 0 && !this.isActive();\n    }\n    isStale() {\n        return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some((observer)=>observer.getCurrentResult().isStale);\n    }\n    isStaleByTime(staleTime = 0) {\n        return this.state.isInvalidated || !this.state.dataUpdatedAt || !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.timeUntilStale)(this.state.dataUpdatedAt, staleTime);\n    }\n    onFocus() {\n        var _this$retryer2;\n        const observer = this.observers.find((x)=>x.shouldFetchOnWindowFocus());\n        if (observer) {\n            observer.refetch({\n                cancelRefetch: false\n            });\n        } // Continue fetch if currently paused\n        (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n    }\n    onOnline() {\n        var _this$retryer3;\n        const observer = this.observers.find((x)=>x.shouldFetchOnReconnect());\n        if (observer) {\n            observer.refetch({\n                cancelRefetch: false\n            });\n        } // Continue fetch if currently paused\n        (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n    }\n    addObserver(observer) {\n        if (this.observers.indexOf(observer) === -1) {\n            this.observers.push(observer); // Stop the query from being garbage collected\n            this.clearGcTimeout();\n            this.cache.notify({\n                type: \"observerAdded\",\n                query: this,\n                observer\n            });\n        }\n    }\n    removeObserver(observer) {\n        if (this.observers.indexOf(observer) !== -1) {\n            this.observers = this.observers.filter((x)=>x !== observer);\n            if (!this.observers.length) {\n                // If the transport layer does not support cancellation\n                // we'll let the query continue so the result can be cached\n                if (this.retryer) {\n                    if (this.abortSignalConsumed) {\n                        this.retryer.cancel({\n                            revert: true\n                        });\n                    } else {\n                        this.retryer.cancelRetry();\n                    }\n                }\n                this.scheduleGc();\n            }\n            this.cache.notify({\n                type: \"observerRemoved\",\n                query: this,\n                observer\n            });\n        }\n    }\n    getObserversCount() {\n        return this.observers.length;\n    }\n    invalidate() {\n        if (!this.state.isInvalidated) {\n            this.dispatch({\n                type: \"invalidate\"\n            });\n        }\n    }\n    fetch(options, fetchOptions) {\n        var _this$options$behavio, _context$fetchOptions;\n        if (this.state.fetchStatus !== \"idle\") {\n            if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n                // Silently cancel current fetch if the user wants to cancel refetches\n                this.cancel({\n                    silent: true\n                });\n            } else if (this.promise) {\n                var _this$retryer4;\n                // make sure that retries that were potentially cancelled due to unmounts can continue\n                (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n                return this.promise;\n            }\n        } // Update config if passed, otherwise the config from the last execution is used\n        if (options) {\n            this.setOptions(options);\n        } // Use the options from the first observer with a query function if no function is found.\n        // This can happen when the query is hydrated or created with setQueryData.\n        if (!this.options.queryFn) {\n            const observer = this.observers.find((x)=>x.options.queryFn);\n            if (observer) {\n                this.setOptions(observer.options);\n            }\n        }\n        if (!Array.isArray(this.options.queryKey)) {\n            if (true) {\n                this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n            }\n        }\n        const abortController = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.getAbortController)(); // Create query function context\n        const queryFnContext = {\n            queryKey: this.queryKey,\n            pageParam: undefined,\n            meta: this.meta\n        }; // Adds an enumerable signal property to the object that\n        // which sets abortSignalConsumed to true when the signal\n        // is read.\n        const addSignalProperty = (object)=>{\n            Object.defineProperty(object, \"signal\", {\n                enumerable: true,\n                get: ()=>{\n                    if (abortController) {\n                        this.abortSignalConsumed = true;\n                        return abortController.signal;\n                    }\n                    return undefined;\n                }\n            });\n        };\n        addSignalProperty(queryFnContext); // Create fetch function\n        const fetchFn = ()=>{\n            if (!this.options.queryFn) {\n                return Promise.reject(\"Missing queryFn\");\n            }\n            this.abortSignalConsumed = false;\n            return this.options.queryFn(queryFnContext);\n        }; // Trigger behavior hook\n        const context = {\n            fetchOptions,\n            options: this.options,\n            queryKey: this.queryKey,\n            state: this.state,\n            fetchFn\n        };\n        addSignalProperty(context);\n        (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n        this.revertState = this.state; // Set to fetching state if not already in it\n        if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n            var _context$fetchOptions2;\n            this.dispatch({\n                type: \"fetch\",\n                meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n            });\n        }\n        const onError = (error)=>{\n            // Optimistically update state if needed\n            if (!((0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(error) && error.silent)) {\n                this.dispatch({\n                    type: \"error\",\n                    error: error\n                });\n            }\n            if (!(0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(error)) {\n                var _this$cache$config$on, _this$cache$config;\n                // Notify cache callback\n                (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);\n                if (true) {\n                    this.logger.error(error);\n                }\n            }\n            if (!this.isFetchingOptimistic) {\n                // Schedule query gc after fetching\n                this.scheduleGc();\n            }\n            this.isFetchingOptimistic = false;\n        }; // Try to fetch the data\n        this.retryer = (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.createRetryer)({\n            fn: context.fetchFn,\n            abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n            onSuccess: (data)=>{\n                var _this$cache$config$on2, _this$cache$config2;\n                if (typeof data === \"undefined\") {\n                    if (true) {\n                        this.logger.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \" + this.queryHash);\n                    }\n                    onError(new Error(\"undefined\"));\n                    return;\n                }\n                this.setData(data); // Notify cache callback\n                (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, data, this);\n                if (!this.isFetchingOptimistic) {\n                    // Schedule query gc after fetching\n                    this.scheduleGc();\n                }\n                this.isFetchingOptimistic = false;\n            },\n            onError,\n            onFail: (failureCount, error)=>{\n                this.dispatch({\n                    type: \"failed\",\n                    failureCount,\n                    error\n                });\n            },\n            onPause: ()=>{\n                this.dispatch({\n                    type: \"pause\"\n                });\n            },\n            onContinue: ()=>{\n                this.dispatch({\n                    type: \"continue\"\n                });\n            },\n            retry: context.options.retry,\n            retryDelay: context.options.retryDelay,\n            networkMode: context.options.networkMode\n        });\n        this.promise = this.retryer.promise;\n        return this.promise;\n    }\n    dispatch(action) {\n        const reducer = (state)=>{\n            var _action$meta, _action$dataUpdatedAt;\n            switch(action.type){\n                case \"failed\":\n                    return {\n                        ...state,\n                        fetchFailureCount: action.failureCount,\n                        fetchFailureReason: action.error\n                    };\n                case \"pause\":\n                    return {\n                        ...state,\n                        fetchStatus: \"paused\"\n                    };\n                case \"continue\":\n                    return {\n                        ...state,\n                        fetchStatus: \"fetching\"\n                    };\n                case \"fetch\":\n                    return {\n                        ...state,\n                        fetchFailureCount: 0,\n                        fetchFailureReason: null,\n                        fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n                        fetchStatus: (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.canFetch)(this.options.networkMode) ? \"fetching\" : \"paused\",\n                        ...!state.dataUpdatedAt && {\n                            error: null,\n                            status: \"loading\"\n                        }\n                    };\n                case \"success\":\n                    return {\n                        ...state,\n                        data: action.data,\n                        dataUpdateCount: state.dataUpdateCount + 1,\n                        dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n                        error: null,\n                        isInvalidated: false,\n                        status: \"success\",\n                        ...!action.manual && {\n                            fetchStatus: \"idle\",\n                            fetchFailureCount: 0,\n                            fetchFailureReason: null\n                        }\n                    };\n                case \"error\":\n                    const error = action.error;\n                    if ((0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(error) && error.revert && this.revertState) {\n                        return {\n                            ...this.revertState\n                        };\n                    }\n                    return {\n                        ...state,\n                        error: error,\n                        errorUpdateCount: state.errorUpdateCount + 1,\n                        errorUpdatedAt: Date.now(),\n                        fetchFailureCount: state.fetchFailureCount + 1,\n                        fetchFailureReason: error,\n                        fetchStatus: \"idle\",\n                        status: \"error\"\n                    };\n                case \"invalidate\":\n                    return {\n                        ...state,\n                        isInvalidated: true\n                    };\n                case \"setState\":\n                    return {\n                        ...state,\n                        ...action.state\n                    };\n            }\n        };\n        this.state = reducer(this.state);\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batch(()=>{\n            this.observers.forEach((observer)=>{\n                observer.onQueryUpdate(action);\n            });\n            this.cache.notify({\n                query: this,\n                type: \"updated\",\n                action\n            });\n        });\n    }\n}\nfunction getDefaultState(options) {\n    const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n    const hasData = typeof data !== \"undefined\";\n    const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    return {\n        data,\n        dataUpdateCount: 0,\n        dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n        error: null,\n        errorUpdateCount: 0,\n        errorUpdatedAt: 0,\n        fetchFailureCount: 0,\n        fetchFailureReason: null,\n        fetchMeta: null,\n        isInvalidated: false,\n        status: hasData ? \"success\" : \"loading\",\n        fetchStatus: \"idle\"\n    };\n}\n //# sourceMappingURL=query.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/query.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/queryCache.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/queryCache.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryCache: () => (/* binding */ QueryCache)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _query_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/query.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n\n\n\n\n// CLASS\nclass QueryCache extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(config){\n        super();\n        this.config = config || {};\n        this.queries = [];\n        this.queriesMap = {};\n    }\n    build(client, options, state) {\n        var _options$queryHash;\n        const queryKey = options.queryKey;\n        const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.hashQueryKeyByOptions)(queryKey, options);\n        let query = this.get(queryHash);\n        if (!query) {\n            query = new _query_mjs__WEBPACK_IMPORTED_MODULE_2__.Query({\n                cache: this,\n                logger: client.getLogger(),\n                queryKey,\n                queryHash,\n                options: client.defaultQueryOptions(options),\n                state,\n                defaultOptions: client.getQueryDefaults(queryKey)\n            });\n            this.add(query);\n        }\n        return query;\n    }\n    add(query) {\n        if (!this.queriesMap[query.queryHash]) {\n            this.queriesMap[query.queryHash] = query;\n            this.queries.push(query);\n            this.notify({\n                type: \"added\",\n                query\n            });\n        }\n    }\n    remove(query) {\n        const queryInMap = this.queriesMap[query.queryHash];\n        if (queryInMap) {\n            query.destroy();\n            this.queries = this.queries.filter((x)=>x !== query);\n            if (queryInMap === query) {\n                delete this.queriesMap[query.queryHash];\n            }\n            this.notify({\n                type: \"removed\",\n                query\n            });\n        }\n    }\n    clear() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.queries.forEach((query)=>{\n                this.remove(query);\n            });\n        });\n    }\n    get(queryHash) {\n        return this.queriesMap[queryHash];\n    }\n    getAll() {\n        return this.queries;\n    }\n    find(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseFilterArgs)(arg1, arg2);\n        if (typeof filters.exact === \"undefined\") {\n            filters.exact = true;\n        }\n        return this.queries.find((query)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.matchQuery)(filters, query));\n    }\n    findAll(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseFilterArgs)(arg1, arg2);\n        return Object.keys(filters).length > 0 ? this.queries.filter((query)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.matchQuery)(filters, query)) : this.queries;\n    }\n    notify(event) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.listeners.forEach((listener)=>{\n                listener(event);\n            });\n        });\n    }\n    onFocus() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.queries.forEach((query)=>{\n                query.onFocus();\n            });\n        });\n    }\n    onOnline() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.queries.forEach((query)=>{\n                query.onOnline();\n            });\n        });\n    }\n}\n //# sourceMappingURL=queryCache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL3F1ZXJ5Q2FjaGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlGO0FBQzdDO0FBQ2dCO0FBQ0Y7QUFFbEQsUUFBUTtBQUNSLE1BQU1NLG1CQUFtQkQsMkRBQVlBO0lBQ25DRSxZQUFZQyxNQUFNLENBQUU7UUFDbEIsS0FBSztRQUNMLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxVQUFVLENBQUM7UUFDekIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtRQUNqQixJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDO0lBQ3JCO0lBRUFDLE1BQU1DLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUU7UUFDNUIsSUFBSUM7UUFFSixNQUFNQyxXQUFXSCxRQUFRRyxRQUFRO1FBQ2pDLE1BQU1DLFlBQVksQ0FBQ0YscUJBQXFCRixRQUFRSSxTQUFTLEtBQUssT0FBT0YscUJBQXFCZixpRUFBcUJBLENBQUNnQixVQUFVSDtRQUMxSCxJQUFJSyxRQUFRLElBQUksQ0FBQ0MsR0FBRyxDQUFDRjtRQUVyQixJQUFJLENBQUNDLE9BQU87WUFDVkEsUUFBUSxJQUFJZiw2Q0FBS0EsQ0FBQztnQkFDaEJpQixPQUFPLElBQUk7Z0JBQ1hDLFFBQVFULE9BQU9VLFNBQVM7Z0JBQ3hCTjtnQkFDQUM7Z0JBQ0FKLFNBQVNELE9BQU9XLG1CQUFtQixDQUFDVjtnQkFDcENDO2dCQUNBVSxnQkFBZ0JaLE9BQU9hLGdCQUFnQixDQUFDVDtZQUMxQztZQUNBLElBQUksQ0FBQ1UsR0FBRyxDQUFDUjtRQUNYO1FBRUEsT0FBT0E7SUFDVDtJQUVBUSxJQUFJUixLQUFLLEVBQUU7UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDUixVQUFVLENBQUNRLE1BQU1ELFNBQVMsQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQ1AsVUFBVSxDQUFDUSxNQUFNRCxTQUFTLENBQUMsR0FBR0M7WUFDbkMsSUFBSSxDQUFDVCxPQUFPLENBQUNrQixJQUFJLENBQUNUO1lBQ2xCLElBQUksQ0FBQ1UsTUFBTSxDQUFDO2dCQUNWQyxNQUFNO2dCQUNOWDtZQUNGO1FBQ0Y7SUFDRjtJQUVBWSxPQUFPWixLQUFLLEVBQUU7UUFDWixNQUFNYSxhQUFhLElBQUksQ0FBQ3JCLFVBQVUsQ0FBQ1EsTUFBTUQsU0FBUyxDQUFDO1FBRW5ELElBQUljLFlBQVk7WUFDZGIsTUFBTWMsT0FBTztZQUNiLElBQUksQ0FBQ3ZCLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU8sQ0FBQ3dCLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBS0EsTUFBTWhCO1lBRTlDLElBQUlhLGVBQWViLE9BQU87Z0JBQ3hCLE9BQU8sSUFBSSxDQUFDUixVQUFVLENBQUNRLE1BQU1ELFNBQVMsQ0FBQztZQUN6QztZQUVBLElBQUksQ0FBQ1csTUFBTSxDQUFDO2dCQUNWQyxNQUFNO2dCQUNOWDtZQUNGO1FBQ0Y7SUFDRjtJQUVBaUIsUUFBUTtRQUNOL0IsNkRBQWFBLENBQUNnQyxLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDM0IsT0FBTyxDQUFDNEIsT0FBTyxDQUFDbkIsQ0FBQUE7Z0JBQ25CLElBQUksQ0FBQ1ksTUFBTSxDQUFDWjtZQUNkO1FBQ0Y7SUFDRjtJQUVBQyxJQUFJRixTQUFTLEVBQUU7UUFDYixPQUFPLElBQUksQ0FBQ1AsVUFBVSxDQUFDTyxVQUFVO0lBQ25DO0lBRUFxQixTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUM3QixPQUFPO0lBQ3JCO0lBRUE4QixLQUFLQyxJQUFJLEVBQUVDLElBQUksRUFBRTtRQUNmLE1BQU0sQ0FBQ0MsUUFBUSxHQUFHekMsMkRBQWVBLENBQUN1QyxNQUFNQztRQUV4QyxJQUFJLE9BQU9DLFFBQVFDLEtBQUssS0FBSyxhQUFhO1lBQ3hDRCxRQUFRQyxLQUFLLEdBQUc7UUFDbEI7UUFFQSxPQUFPLElBQUksQ0FBQ2xDLE9BQU8sQ0FBQzhCLElBQUksQ0FBQ3JCLENBQUFBLFFBQVNoQixzREFBVUEsQ0FBQ3dDLFNBQVN4QjtJQUN4RDtJQUVBMEIsUUFBUUosSUFBSSxFQUFFQyxJQUFJLEVBQUU7UUFDbEIsTUFBTSxDQUFDQyxRQUFRLEdBQUd6QywyREFBZUEsQ0FBQ3VDLE1BQU1DO1FBQ3hDLE9BQU9JLE9BQU9DLElBQUksQ0FBQ0osU0FBU0ssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDdEMsT0FBTyxDQUFDd0IsTUFBTSxDQUFDZixDQUFBQSxRQUFTaEIsc0RBQVVBLENBQUN3QyxTQUFTeEIsVUFBVSxJQUFJLENBQUNULE9BQU87SUFDbEg7SUFFQW1CLE9BQU9vQixLQUFLLEVBQUU7UUFDWjVDLDZEQUFhQSxDQUFDZ0MsS0FBSyxDQUFDO1lBQ2xCLElBQUksQ0FBQ2EsU0FBUyxDQUFDWixPQUFPLENBQUNhLENBQUFBO2dCQUNyQkEsU0FBU0Y7WUFDWDtRQUNGO0lBQ0Y7SUFFQUcsVUFBVTtRQUNSL0MsNkRBQWFBLENBQUNnQyxLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDM0IsT0FBTyxDQUFDNEIsT0FBTyxDQUFDbkIsQ0FBQUE7Z0JBQ25CQSxNQUFNaUMsT0FBTztZQUNmO1FBQ0Y7SUFDRjtJQUVBQyxXQUFXO1FBQ1RoRCw2REFBYUEsQ0FBQ2dDLEtBQUssQ0FBQztZQUNsQixJQUFJLENBQUMzQixPQUFPLENBQUM0QixPQUFPLENBQUNuQixDQUFBQTtnQkFDbkJBLE1BQU1rQyxRQUFRO1lBQ2hCO1FBQ0Y7SUFDRjtBQUVGO0FBRXNCLENBQ3RCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmRpbmcvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL3F1ZXJ5Q2FjaGUubWpzPzk5MmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzaFF1ZXJ5S2V5QnlPcHRpb25zLCBwYXJzZUZpbHRlckFyZ3MsIG1hdGNoUXVlcnkgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gJy4vcXVlcnkubWpzJztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuL25vdGlmeU1hbmFnZXIubWpzJztcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJhYmxlLm1qcyc7XG5cbi8vIENMQVNTXG5jbGFzcyBRdWVyeUNhY2hlIGV4dGVuZHMgU3Vic2NyaWJhYmxlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICB0aGlzLnF1ZXJpZXMgPSBbXTtcbiAgICB0aGlzLnF1ZXJpZXNNYXAgPSB7fTtcbiAgfVxuXG4gIGJ1aWxkKGNsaWVudCwgb3B0aW9ucywgc3RhdGUpIHtcbiAgICB2YXIgX29wdGlvbnMkcXVlcnlIYXNoO1xuXG4gICAgY29uc3QgcXVlcnlLZXkgPSBvcHRpb25zLnF1ZXJ5S2V5O1xuICAgIGNvbnN0IHF1ZXJ5SGFzaCA9IChfb3B0aW9ucyRxdWVyeUhhc2ggPSBvcHRpb25zLnF1ZXJ5SGFzaCkgIT0gbnVsbCA/IF9vcHRpb25zJHF1ZXJ5SGFzaCA6IGhhc2hRdWVyeUtleUJ5T3B0aW9ucyhxdWVyeUtleSwgb3B0aW9ucyk7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy5nZXQocXVlcnlIYXNoKTtcblxuICAgIGlmICghcXVlcnkpIHtcbiAgICAgIHF1ZXJ5ID0gbmV3IFF1ZXJ5KHtcbiAgICAgICAgY2FjaGU6IHRoaXMsXG4gICAgICAgIGxvZ2dlcjogY2xpZW50LmdldExvZ2dlcigpLFxuICAgICAgICBxdWVyeUtleSxcbiAgICAgICAgcXVlcnlIYXNoLFxuICAgICAgICBvcHRpb25zOiBjbGllbnQuZGVmYXVsdFF1ZXJ5T3B0aW9ucyhvcHRpb25zKSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGRlZmF1bHRPcHRpb25zOiBjbGllbnQuZ2V0UXVlcnlEZWZhdWx0cyhxdWVyeUtleSlcbiAgICAgIH0pO1xuICAgICAgdGhpcy5hZGQocXVlcnkpO1xuICAgIH1cblxuICAgIHJldHVybiBxdWVyeTtcbiAgfVxuXG4gIGFkZChxdWVyeSkge1xuICAgIGlmICghdGhpcy5xdWVyaWVzTWFwW3F1ZXJ5LnF1ZXJ5SGFzaF0pIHtcbiAgICAgIHRoaXMucXVlcmllc01hcFtxdWVyeS5xdWVyeUhhc2hdID0gcXVlcnk7XG4gICAgICB0aGlzLnF1ZXJpZXMucHVzaChxdWVyeSk7XG4gICAgICB0aGlzLm5vdGlmeSh7XG4gICAgICAgIHR5cGU6ICdhZGRlZCcsXG4gICAgICAgIHF1ZXJ5XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZW1vdmUocXVlcnkpIHtcbiAgICBjb25zdCBxdWVyeUluTWFwID0gdGhpcy5xdWVyaWVzTWFwW3F1ZXJ5LnF1ZXJ5SGFzaF07XG5cbiAgICBpZiAocXVlcnlJbk1hcCkge1xuICAgICAgcXVlcnkuZGVzdHJveSgpO1xuICAgICAgdGhpcy5xdWVyaWVzID0gdGhpcy5xdWVyaWVzLmZpbHRlcih4ID0+IHggIT09IHF1ZXJ5KTtcblxuICAgICAgaWYgKHF1ZXJ5SW5NYXAgPT09IHF1ZXJ5KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnF1ZXJpZXNNYXBbcXVlcnkucXVlcnlIYXNoXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5ub3RpZnkoe1xuICAgICAgICB0eXBlOiAncmVtb3ZlZCcsXG4gICAgICAgIHF1ZXJ5XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKCgpID0+IHtcbiAgICAgIHRoaXMucXVlcmllcy5mb3JFYWNoKHF1ZXJ5ID0+IHtcbiAgICAgICAgdGhpcy5yZW1vdmUocXVlcnkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXQocXVlcnlIYXNoKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcmllc01hcFtxdWVyeUhhc2hdO1xuICB9XG5cbiAgZ2V0QWxsKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJpZXM7XG4gIH1cblxuICBmaW5kKGFyZzEsIGFyZzIpIHtcbiAgICBjb25zdCBbZmlsdGVyc10gPSBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMik7XG5cbiAgICBpZiAodHlwZW9mIGZpbHRlcnMuZXhhY3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmaWx0ZXJzLmV4YWN0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5xdWVyaWVzLmZpbmQocXVlcnkgPT4gbWF0Y2hRdWVyeShmaWx0ZXJzLCBxdWVyeSkpO1xuICB9XG5cbiAgZmluZEFsbChhcmcxLCBhcmcyKSB7XG4gICAgY29uc3QgW2ZpbHRlcnNdID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIpO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhmaWx0ZXJzKS5sZW5ndGggPiAwID8gdGhpcy5xdWVyaWVzLmZpbHRlcihxdWVyeSA9PiBtYXRjaFF1ZXJ5KGZpbHRlcnMsIHF1ZXJ5KSkgOiB0aGlzLnF1ZXJpZXM7XG4gIH1cblxuICBub3RpZnkoZXZlbnQpIHtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKCgpID0+IHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xuICAgICAgICBsaXN0ZW5lcihldmVudCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uRm9jdXMoKSB7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLnF1ZXJpZXMuZm9yRWFjaChxdWVyeSA9PiB7XG4gICAgICAgIHF1ZXJ5Lm9uRm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgb25PbmxpbmUoKSB7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLnF1ZXJpZXMuZm9yRWFjaChxdWVyeSA9PiB7XG4gICAgICAgIHF1ZXJ5Lm9uT25saW5lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG59XG5cbmV4cG9ydCB7IFF1ZXJ5Q2FjaGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5Q2FjaGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbImhhc2hRdWVyeUtleUJ5T3B0aW9ucyIsInBhcnNlRmlsdGVyQXJncyIsIm1hdGNoUXVlcnkiLCJRdWVyeSIsIm5vdGlmeU1hbmFnZXIiLCJTdWJzY3JpYmFibGUiLCJRdWVyeUNhY2hlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJxdWVyaWVzIiwicXVlcmllc01hcCIsImJ1aWxkIiwiY2xpZW50Iiwib3B0aW9ucyIsInN0YXRlIiwiX29wdGlvbnMkcXVlcnlIYXNoIiwicXVlcnlLZXkiLCJxdWVyeUhhc2giLCJxdWVyeSIsImdldCIsImNhY2hlIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiZGVmYXVsdFF1ZXJ5T3B0aW9ucyIsImRlZmF1bHRPcHRpb25zIiwiZ2V0UXVlcnlEZWZhdWx0cyIsImFkZCIsInB1c2giLCJub3RpZnkiLCJ0eXBlIiwicmVtb3ZlIiwicXVlcnlJbk1hcCIsImRlc3Ryb3kiLCJmaWx0ZXIiLCJ4IiwiY2xlYXIiLCJiYXRjaCIsImZvckVhY2giLCJnZXRBbGwiLCJmaW5kIiwiYXJnMSIsImFyZzIiLCJmaWx0ZXJzIiwiZXhhY3QiLCJmaW5kQWxsIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImV2ZW50IiwibGlzdGVuZXJzIiwibGlzdGVuZXIiLCJvbkZvY3VzIiwib25PbmxpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/queryCache.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/queryClient.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/queryClient.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryClient: () => (/* binding */ QueryClient)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _queryCache_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queryCache.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryCache.mjs\");\n/* harmony import */ var _mutationCache_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mutationCache.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationCache.mjs\");\n/* harmony import */ var _focusManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./focusManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs\");\n/* harmony import */ var _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./onlineManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./infiniteQueryBehavior.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs\");\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/logger.mjs\");\n\n\n\n\n\n\n\n\n// CLASS\nclass QueryClient {\n    constructor(config = {}){\n        this.queryCache = config.queryCache || new _queryCache_mjs__WEBPACK_IMPORTED_MODULE_0__.QueryCache();\n        this.mutationCache = config.mutationCache || new _mutationCache_mjs__WEBPACK_IMPORTED_MODULE_1__.MutationCache();\n        this.logger = config.logger || _logger_mjs__WEBPACK_IMPORTED_MODULE_2__.defaultLogger;\n        this.defaultOptions = config.defaultOptions || {};\n        this.queryDefaults = [];\n        this.mutationDefaults = [];\n        if ( true && config.logger) {\n            this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n        }\n    }\n    mount() {\n        this.unsubscribeFocus = _focusManager_mjs__WEBPACK_IMPORTED_MODULE_3__.focusManager.subscribe(()=>{\n            if (_focusManager_mjs__WEBPACK_IMPORTED_MODULE_3__.focusManager.isFocused()) {\n                this.resumePausedMutations();\n                this.queryCache.onFocus();\n            }\n        });\n        this.unsubscribeOnline = _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_4__.onlineManager.subscribe(()=>{\n            if (_onlineManager_mjs__WEBPACK_IMPORTED_MODULE_4__.onlineManager.isOnline()) {\n                this.resumePausedMutations();\n                this.queryCache.onOnline();\n            }\n        });\n    }\n    unmount() {\n        var _this$unsubscribeFocu, _this$unsubscribeOnli;\n        (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n        (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n    }\n    isFetching(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2);\n        filters.fetchStatus = \"fetching\";\n        return this.queryCache.findAll(filters).length;\n    }\n    isMutating(filters) {\n        return this.mutationCache.findAll({\n            ...filters,\n            fetching: true\n        }).length;\n    }\n    getQueryData(queryKey, filters) {\n        var _this$queryCache$find;\n        return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n    }\n    ensureQueryData(arg1, arg2, arg3) {\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(arg1, arg2, arg3);\n        const cachedData = this.getQueryData(parsedOptions.queryKey);\n        return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n    }\n    getQueriesData(queryKeyOrFilters) {\n        return this.getQueryCache().findAll(queryKeyOrFilters).map(({ queryKey, state })=>{\n            const data = state.data;\n            return [\n                queryKey,\n                data\n            ];\n        });\n    }\n    setQueryData(queryKey, updater, options) {\n        const query = this.queryCache.find(queryKey);\n        const prevData = query == null ? void 0 : query.state.data;\n        const data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.functionalUpdate)(updater, prevData);\n        if (typeof data === \"undefined\") {\n            return undefined;\n        }\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(queryKey);\n        const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n        return this.queryCache.build(this, defaultedOptions).setData(data, {\n            ...options,\n            manual: true\n        });\n    }\n    setQueriesData(queryKeyOrFilters, updater, options) {\n        return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>this.getQueryCache().findAll(queryKeyOrFilters).map(({ queryKey })=>[\n                    queryKey,\n                    this.setQueryData(queryKey, updater, options)\n                ]));\n    }\n    getQueryState(queryKey, filters) {\n        var _this$queryCache$find2;\n        return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n    }\n    removeQueries(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2);\n        const queryCache = this.queryCache;\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>{\n            queryCache.findAll(filters).forEach((query)=>{\n                queryCache.remove(query);\n            });\n        });\n    }\n    resetQueries(arg1, arg2, arg3) {\n        const [filters, options] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        const queryCache = this.queryCache;\n        const refetchFilters = {\n            type: \"active\",\n            ...filters\n        };\n        return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>{\n            queryCache.findAll(filters).forEach((query)=>{\n                query.reset();\n            });\n            return this.refetchQueries(refetchFilters, options);\n        });\n    }\n    cancelQueries(arg1, arg2, arg3) {\n        const [filters, cancelOptions = {}] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        if (typeof cancelOptions.revert === \"undefined\") {\n            cancelOptions.revert = true;\n        }\n        const promises = _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>this.queryCache.findAll(filters).map((query)=>query.cancel(cancelOptions)));\n        return Promise.all(promises).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n    }\n    invalidateQueries(arg1, arg2, arg3) {\n        const [filters, options] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>{\n            var _ref, _filters$refetchType;\n            this.queryCache.findAll(filters).forEach((query)=>{\n                query.invalidate();\n            });\n            if (filters.refetchType === \"none\") {\n                return Promise.resolve();\n            }\n            const refetchFilters = {\n                ...filters,\n                type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : \"active\"\n            };\n            return this.refetchQueries(refetchFilters, options);\n        });\n    }\n    refetchQueries(arg1, arg2, arg3) {\n        const [filters, options] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        const promises = _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>this.queryCache.findAll(filters).filter((query)=>!query.isDisabled()).map((query)=>{\n                var _options$cancelRefetc;\n                return query.fetch(undefined, {\n                    ...options,\n                    cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n                    meta: {\n                        refetchPage: filters.refetchPage\n                    }\n                });\n            }));\n        let promise = Promise.all(promises).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n        if (!(options != null && options.throwOnError)) {\n            promise = promise.catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n        }\n        return promise;\n    }\n    fetchQuery(arg1, arg2, arg3) {\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(arg1, arg2, arg3);\n        const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n        if (typeof defaultedOptions.retry === \"undefined\") {\n            defaultedOptions.retry = false;\n        }\n        const query = this.queryCache.build(this, defaultedOptions);\n        return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n    prefetchQuery(arg1, arg2, arg3) {\n        return this.fetchQuery(arg1, arg2, arg3).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n    }\n    fetchInfiniteQuery(arg1, arg2, arg3) {\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(arg1, arg2, arg3);\n        parsedOptions.behavior = (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_7__.infiniteQueryBehavior)();\n        return this.fetchQuery(parsedOptions);\n    }\n    prefetchInfiniteQuery(arg1, arg2, arg3) {\n        return this.fetchInfiniteQuery(arg1, arg2, arg3).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n    }\n    resumePausedMutations() {\n        return this.mutationCache.resumePausedMutations();\n    }\n    getQueryCache() {\n        return this.queryCache;\n    }\n    getMutationCache() {\n        return this.mutationCache;\n    }\n    getLogger() {\n        return this.logger;\n    }\n    getDefaultOptions() {\n        return this.defaultOptions;\n    }\n    setDefaultOptions(options) {\n        this.defaultOptions = options;\n    }\n    setQueryDefaults(queryKey, options) {\n        const result = this.queryDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(queryKey) === (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(x.queryKey));\n        if (result) {\n            result.defaultOptions = options;\n        } else {\n            this.queryDefaults.push({\n                queryKey,\n                defaultOptions: options\n            });\n        }\n    }\n    getQueryDefaults(queryKey) {\n        if (!queryKey) {\n            return undefined;\n        } // Get the first matching defaults\n        const firstMatchingDefaults = this.queryDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(queryKey, x.queryKey)); // Additional checks and error in dev mode\n        if (true) {\n            // Retrieve all matching defaults for the given key\n            const matchingDefaults = this.queryDefaults.filter((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n            if (matchingDefaults.length > 1) {\n                this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n            }\n        }\n        return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n    }\n    setMutationDefaults(mutationKey, options) {\n        const result = this.mutationDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(mutationKey) === (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(x.mutationKey));\n        if (result) {\n            result.defaultOptions = options;\n        } else {\n            this.mutationDefaults.push({\n                mutationKey,\n                defaultOptions: options\n            });\n        }\n    }\n    getMutationDefaults(mutationKey) {\n        if (!mutationKey) {\n            return undefined;\n        } // Get the first matching defaults\n        const firstMatchingDefaults = this.mutationDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n        if (true) {\n            // Retrieve all matching defaults for the given key\n            const matchingDefaults = this.mutationDefaults.filter((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n            if (matchingDefaults.length > 1) {\n                this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n            }\n        }\n        return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n    }\n    defaultQueryOptions(options) {\n        if (options != null && options._defaulted) {\n            return options;\n        }\n        const defaultedOptions = {\n            ...this.defaultOptions.queries,\n            ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n            ...options,\n            _defaulted: true\n        };\n        if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n            defaultedOptions.queryHash = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKeyByOptions)(defaultedOptions.queryKey, defaultedOptions);\n        } // dependent default values\n        if (typeof defaultedOptions.refetchOnReconnect === \"undefined\") {\n            defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n        }\n        if (typeof defaultedOptions.useErrorBoundary === \"undefined\") {\n            defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n        }\n        return defaultedOptions;\n    }\n    defaultMutationOptions(options) {\n        if (options != null && options._defaulted) {\n            return options;\n        }\n        return {\n            ...this.defaultOptions.mutations,\n            ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n            ...options,\n            _defaulted: true\n        };\n    }\n    clear() {\n        this.queryCache.clear();\n        this.mutationCache.clear();\n    }\n}\n //# sourceMappingURL=queryClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/queryClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryObserver: () => (/* binding */ QueryObserver)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _focusManager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./focusManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _retryer_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./retryer.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/retryer.mjs\");\n\n\n\n\n\nclass QueryObserver extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(client, options){\n        super();\n        this.client = client;\n        this.options = options;\n        this.trackedProps = new Set();\n        this.selectError = null;\n        this.bindMethods();\n        this.setOptions(options);\n    }\n    bindMethods() {\n        this.remove = this.remove.bind(this);\n        this.refetch = this.refetch.bind(this);\n    }\n    onSubscribe() {\n        if (this.listeners.length === 1) {\n            this.currentQuery.addObserver(this);\n            if (shouldFetchOnMount(this.currentQuery, this.options)) {\n                this.executeFetch();\n            }\n            this.updateTimers();\n        }\n    }\n    onUnsubscribe() {\n        if (!this.listeners.length) {\n            this.destroy();\n        }\n    }\n    shouldFetchOnReconnect() {\n        return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n    }\n    shouldFetchOnWindowFocus() {\n        return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n    }\n    destroy() {\n        this.listeners = [];\n        this.clearStaleTimeout();\n        this.clearRefetchInterval();\n        this.currentQuery.removeObserver(this);\n    }\n    setOptions(options, notifyOptions) {\n        const prevOptions = this.options;\n        const prevQuery = this.currentQuery;\n        this.options = this.client.defaultQueryOptions(options);\n        if ( true && typeof (options == null ? void 0 : options.isDataEqual) !== \"undefined\") {\n            this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n        }\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(prevOptions, this.options)) {\n            this.client.getQueryCache().notify({\n                type: \"observerOptionsUpdated\",\n                query: this.currentQuery,\n                observer: this\n            });\n        }\n        if (typeof this.options.enabled !== \"undefined\" && typeof this.options.enabled !== \"boolean\") {\n            throw new Error(\"Expected enabled to be a boolean\");\n        } // Keep previous query key if the user does not supply one\n        if (!this.options.queryKey) {\n            this.options.queryKey = prevOptions.queryKey;\n        }\n        this.updateQuery();\n        const mounted = this.hasListeners(); // Fetch if there are subscribers\n        if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n            this.executeFetch();\n        } // Update result\n        this.updateResult(notifyOptions); // Update stale interval if needed\n        if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n            this.updateStaleTimeout();\n        }\n        const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n        if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n            this.updateRefetchInterval(nextRefetchInterval);\n        }\n    }\n    getOptimisticResult(options) {\n        const query = this.client.getQueryCache().build(this.client, options);\n        return this.createResult(query, options);\n    }\n    getCurrentResult() {\n        return this.currentResult;\n    }\n    trackResult(result) {\n        const trackedResult = {};\n        Object.keys(result).forEach((key)=>{\n            Object.defineProperty(trackedResult, key, {\n                configurable: false,\n                enumerable: true,\n                get: ()=>{\n                    this.trackedProps.add(key);\n                    return result[key];\n                }\n            });\n        });\n        return trackedResult;\n    }\n    getCurrentQuery() {\n        return this.currentQuery;\n    }\n    remove() {\n        this.client.getQueryCache().remove(this.currentQuery);\n    }\n    refetch({ refetchPage, ...options } = {}) {\n        return this.fetch({\n            ...options,\n            meta: {\n                refetchPage\n            }\n        });\n    }\n    fetchOptimistic(options) {\n        const defaultedOptions = this.client.defaultQueryOptions(options);\n        const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n        query.isFetchingOptimistic = true;\n        return query.fetch().then(()=>this.createResult(query, defaultedOptions));\n    }\n    fetch(fetchOptions) {\n        var _fetchOptions$cancelR;\n        return this.executeFetch({\n            ...fetchOptions,\n            cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n        }).then(()=>{\n            this.updateResult();\n            return this.currentResult;\n        });\n    }\n    executeFetch(fetchOptions) {\n        // Make sure we reference the latest query as the current one might have been removed\n        this.updateQuery(); // Fetch\n        let promise = this.currentQuery.fetch(this.options, fetchOptions);\n        if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n            promise = promise.catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.noop);\n        }\n        return promise;\n    }\n    updateStaleTimeout() {\n        this.clearStaleTimeout();\n        if (_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer || this.currentResult.isStale || !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isValidTimeout)(this.options.staleTime)) {\n            return;\n        }\n        const time = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.timeUntilStale)(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n        // To mitigate this issue we always add 1 ms to the timeout.\n        const timeout = time + 1;\n        this.staleTimeoutId = setTimeout(()=>{\n            if (!this.currentResult.isStale) {\n                this.updateResult();\n            }\n        }, timeout);\n    }\n    computeRefetchInterval() {\n        var _this$options$refetch;\n        return typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n    }\n    updateRefetchInterval(nextInterval) {\n        this.clearRefetchInterval();\n        this.currentRefetchInterval = nextInterval;\n        if (_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer || this.options.enabled === false || !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isValidTimeout)(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n            return;\n        }\n        this.refetchIntervalId = setInterval(()=>{\n            if (this.options.refetchIntervalInBackground || _focusManager_mjs__WEBPACK_IMPORTED_MODULE_2__.focusManager.isFocused()) {\n                this.executeFetch();\n            }\n        }, this.currentRefetchInterval);\n    }\n    updateTimers() {\n        this.updateStaleTimeout();\n        this.updateRefetchInterval(this.computeRefetchInterval());\n    }\n    clearStaleTimeout() {\n        if (this.staleTimeoutId) {\n            clearTimeout(this.staleTimeoutId);\n            this.staleTimeoutId = undefined;\n        }\n    }\n    clearRefetchInterval() {\n        if (this.refetchIntervalId) {\n            clearInterval(this.refetchIntervalId);\n            this.refetchIntervalId = undefined;\n        }\n    }\n    createResult(query, options) {\n        const prevQuery = this.currentQuery;\n        const prevOptions = this.options;\n        const prevResult = this.currentResult;\n        const prevResultState = this.currentResultState;\n        const prevResultOptions = this.currentResultOptions;\n        const queryChange = query !== prevQuery;\n        const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n        const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n        const { state } = query;\n        let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state;\n        let isPreviousData = false;\n        let isPlaceholderData = false;\n        let data; // Optimistically set result in fetching state if needed\n        if (options._optimisticResults) {\n            const mounted = this.hasListeners();\n            const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n            const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n            if (fetchOnMount || fetchOptionally) {\n                fetchStatus = (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.canFetch)(query.options.networkMode) ? \"fetching\" : \"paused\";\n                if (!dataUpdatedAt) {\n                    status = \"loading\";\n                }\n            }\n            if (options._optimisticResults === \"isRestoring\") {\n                fetchStatus = \"idle\";\n            }\n        } // Keep previous data if needed\n        if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== \"error\") {\n            data = prevQueryResult.data;\n            dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n            status = prevQueryResult.status;\n            isPreviousData = true;\n        } else if (options.select && typeof state.data !== \"undefined\") {\n            // Memoize select result\n            if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n                data = this.selectResult;\n            } else {\n                try {\n                    this.selectFn = options.select;\n                    data = options.select(state.data);\n                    data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.replaceData)(prevResult == null ? void 0 : prevResult.data, data, options);\n                    this.selectResult = data;\n                    this.selectError = null;\n                } catch (selectError) {\n                    if (true) {\n                        this.client.getLogger().error(selectError);\n                    }\n                    this.selectError = selectError;\n                }\n            }\n        } else {\n            data = state.data;\n        } // Show placeholder data if needed\n        if (typeof options.placeholderData !== \"undefined\" && typeof data === \"undefined\" && status === \"loading\") {\n            let placeholderData; // Memoize placeholder data\n            if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n                placeholderData = prevResult.data;\n            } else {\n                placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData() : options.placeholderData;\n                if (options.select && typeof placeholderData !== \"undefined\") {\n                    try {\n                        placeholderData = options.select(placeholderData);\n                        this.selectError = null;\n                    } catch (selectError) {\n                        if (true) {\n                            this.client.getLogger().error(selectError);\n                        }\n                        this.selectError = selectError;\n                    }\n                }\n            }\n            if (typeof placeholderData !== \"undefined\") {\n                status = \"success\";\n                data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.replaceData)(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n                isPlaceholderData = true;\n            }\n        }\n        if (this.selectError) {\n            error = this.selectError;\n            data = this.selectResult;\n            errorUpdatedAt = Date.now();\n            status = \"error\";\n        }\n        const isFetching = fetchStatus === \"fetching\";\n        const isLoading = status === \"loading\";\n        const isError = status === \"error\";\n        const result = {\n            status,\n            fetchStatus,\n            isLoading,\n            isSuccess: status === \"success\",\n            isError,\n            isInitialLoading: isLoading && isFetching,\n            data,\n            dataUpdatedAt,\n            error,\n            errorUpdatedAt,\n            failureCount: state.fetchFailureCount,\n            failureReason: state.fetchFailureReason,\n            errorUpdateCount: state.errorUpdateCount,\n            isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n            isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n            isFetching,\n            isRefetching: isFetching && !isLoading,\n            isLoadingError: isError && state.dataUpdatedAt === 0,\n            isPaused: fetchStatus === \"paused\",\n            isPlaceholderData,\n            isPreviousData,\n            isRefetchError: isError && state.dataUpdatedAt !== 0,\n            isStale: isStale(query, options),\n            refetch: this.refetch,\n            remove: this.remove\n        };\n        return result;\n    }\n    updateResult(notifyOptions) {\n        const prevResult = this.currentResult;\n        const nextResult = this.createResult(this.currentQuery, this.options);\n        this.currentResultState = this.currentQuery.state;\n        this.currentResultOptions = this.options; // Only notify and update result if something has changed\n        if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(nextResult, prevResult)) {\n            return;\n        }\n        this.currentResult = nextResult; // Determine which callbacks to trigger\n        const defaultNotifyOptions = {\n            cache: true\n        };\n        const shouldNotifyListeners = ()=>{\n            if (!prevResult) {\n                return true;\n            }\n            const { notifyOnChangeProps } = this.options;\n            if (notifyOnChangeProps === \"all\" || !notifyOnChangeProps && !this.trackedProps.size) {\n                return true;\n            }\n            const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n            if (this.options.useErrorBoundary) {\n                includedProps.add(\"error\");\n            }\n            return Object.keys(this.currentResult).some((key)=>{\n                const typedKey = key;\n                const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n                return changed && includedProps.has(typedKey);\n            });\n        };\n        if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n            defaultNotifyOptions.listeners = true;\n        }\n        this.notify({\n            ...defaultNotifyOptions,\n            ...notifyOptions\n        });\n    }\n    updateQuery() {\n        const query = this.client.getQueryCache().build(this.client, this.options);\n        if (query === this.currentQuery) {\n            return;\n        }\n        const prevQuery = this.currentQuery;\n        this.currentQuery = query;\n        this.currentQueryInitialState = query.state;\n        this.previousQueryResult = this.currentResult;\n        if (this.hasListeners()) {\n            prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n            query.addObserver(this);\n        }\n    }\n    onQueryUpdate(action) {\n        const notifyOptions = {};\n        if (action.type === \"success\") {\n            notifyOptions.onSuccess = !action.manual;\n        } else if (action.type === \"error\" && !(0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(action.error)) {\n            notifyOptions.onError = true;\n        }\n        this.updateResult(notifyOptions);\n        if (this.hasListeners()) {\n            this.updateTimers();\n        }\n    }\n    notify(notifyOptions) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batch(()=>{\n            // First trigger the configuration callbacks\n            if (notifyOptions.onSuccess) {\n                var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n                (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n                (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n            } else if (notifyOptions.onError) {\n                var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n                (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n                (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n            } // Then trigger the listeners\n            if (notifyOptions.listeners) {\n                this.listeners.forEach((listener)=>{\n                    listener(this.currentResult);\n                });\n            } // Then the cache listeners\n            if (notifyOptions.cache) {\n                this.client.getQueryCache().notify({\n                    query: this.currentQuery,\n                    type: \"observerResultsUpdated\"\n                });\n            }\n        });\n    }\n}\nfunction shouldLoadOnMount(query, options) {\n    return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n    return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n    if (options.enabled !== false) {\n        const value = typeof field === \"function\" ? field(query) : field;\n        return value === \"always\" || value !== false && isStale(query, options);\n    }\n    return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n    return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n    return query.isStaleByTime(options.staleTime);\n}\n //# sourceMappingURL=queryObserver.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL3F1ZXJ5T2JzZXJ2ZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErRztBQUMzRDtBQUNGO0FBQ0E7QUFDUztBQUUzRCxNQUFNVyxzQkFBc0JILDJEQUFZQTtJQUN0Q0ksWUFBWUMsTUFBTSxFQUFFQyxPQUFPLENBQUU7UUFDM0IsS0FBSztRQUNMLElBQUksQ0FBQ0QsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUlDO1FBQ3hCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0MsV0FBVztRQUNoQixJQUFJLENBQUNDLFVBQVUsQ0FBQ0w7SUFDbEI7SUFFQUksY0FBYztRQUNaLElBQUksQ0FBQ0UsTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTSxDQUFDQyxJQUFJLENBQUMsSUFBSTtRQUNuQyxJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0QsSUFBSSxDQUFDLElBQUk7SUFDdkM7SUFFQUUsY0FBYztRQUNaLElBQUksSUFBSSxDQUFDQyxTQUFTLENBQUNDLE1BQU0sS0FBSyxHQUFHO1lBQy9CLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxXQUFXLENBQUMsSUFBSTtZQUVsQyxJQUFJQyxtQkFBbUIsSUFBSSxDQUFDRixZQUFZLEVBQUUsSUFBSSxDQUFDWixPQUFPLEdBQUc7Z0JBQ3ZELElBQUksQ0FBQ2UsWUFBWTtZQUNuQjtZQUVBLElBQUksQ0FBQ0MsWUFBWTtRQUNuQjtJQUNGO0lBRUFDLGdCQUFnQjtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUNQLFNBQVMsQ0FBQ0MsTUFBTSxFQUFFO1lBQzFCLElBQUksQ0FBQ08sT0FBTztRQUNkO0lBQ0Y7SUFFQUMseUJBQXlCO1FBQ3ZCLE9BQU9DLGNBQWMsSUFBSSxDQUFDUixZQUFZLEVBQUUsSUFBSSxDQUFD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LFFBQVFnRCxTQUFTO0FBQzlDO0FBRXlCLENBQ3pCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmRpbmcvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL3F1ZXJ5T2JzZXJ2ZXIubWpzPzYzYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2hhbGxvd0VxdWFsT2JqZWN0cywgbm9vcCwgaXNTZXJ2ZXIsIGlzVmFsaWRUaW1lb3V0LCB0aW1lVW50aWxTdGFsZSwgcmVwbGFjZURhdGEgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyLm1qcyc7XG5pbXBvcnQgeyBmb2N1c01hbmFnZXIgfSBmcm9tICcuL2ZvY3VzTWFuYWdlci5tanMnO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUubWpzJztcbmltcG9ydCB7IGNhbkZldGNoLCBpc0NhbmNlbGxlZEVycm9yIH0gZnJvbSAnLi9yZXRyeWVyLm1qcyc7XG5cbmNsYXNzIFF1ZXJ5T2JzZXJ2ZXIgZXh0ZW5kcyBTdWJzY3JpYmFibGUge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy50cmFja2VkUHJvcHMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zZWxlY3RFcnJvciA9IG51bGw7XG4gICAgdGhpcy5iaW5kTWV0aG9kcygpO1xuICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgfVxuXG4gIGJpbmRNZXRob2RzKCkge1xuICAgIHRoaXMucmVtb3ZlID0gdGhpcy5yZW1vdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlZmV0Y2ggPSB0aGlzLnJlZmV0Y2guYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uU3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLmxpc3RlbmVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuY3VycmVudFF1ZXJ5LmFkZE9ic2VydmVyKHRoaXMpO1xuXG4gICAgICBpZiAoc2hvdWxkRmV0Y2hPbk1vdW50KHRoaXMuY3VycmVudFF1ZXJ5LCB0aGlzLm9wdGlvbnMpKSB7XG4gICAgICAgIHRoaXMuZXhlY3V0ZUZldGNoKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlVGltZXJzKCk7XG4gICAgfVxuICB9XG5cbiAgb25VbnN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgc2hvdWxkRmV0Y2hPblJlY29ubmVjdCgpIHtcbiAgICByZXR1cm4gc2hvdWxkRmV0Y2hPbih0aGlzLmN1cnJlbnRRdWVyeSwgdGhpcy5vcHRpb25zLCB0aGlzLm9wdGlvbnMucmVmZXRjaE9uUmVjb25uZWN0KTtcbiAgfVxuXG4gIHNob3VsZEZldGNoT25XaW5kb3dGb2N1cygpIHtcbiAgICByZXR1cm4gc2hvdWxkRmV0Y2hPbih0aGlzLmN1cnJlbnRRdWVyeSwgdGhpcy5vcHRpb25zLCB0aGlzLm9wdGlvbnMucmVmZXRjaE9uV2luZG93Rm9jdXMpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuY2xlYXJTdGFsZVRpbWVvdXQoKTtcbiAgICB0aGlzLmNsZWFyUmVmZXRjaEludGVydmFsKCk7XG4gICAgdGhpcy5jdXJyZW50UXVlcnkucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gIH1cblxuICBzZXRPcHRpb25zKG9wdGlvbnMsIG5vdGlmeU9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmV2T3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBwcmV2UXVlcnkgPSB0aGlzLmN1cnJlbnRRdWVyeTtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNsaWVudC5kZWZhdWx0UXVlcnlPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmlzRGF0YUVxdWFsKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuY2xpZW50LmdldExvZ2dlcigpLmVycm9yKFwiVGhlIGlzRGF0YUVxdWFsIG9wdGlvbiBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi4gWW91IGNhbiBhY2hpZXZlIHRoZSBzYW1lIGZ1bmN0aW9uYWxpdHkgYnkgcGFzc2luZyBhIGZ1bmN0aW9uIGFzIHRoZSBzdHJ1Y3R1cmFsU2hhcmluZyBvcHRpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKCFzaGFsbG93RXF1YWxPYmplY3RzKHByZXZPcHRpb25zLCB0aGlzLm9wdGlvbnMpKSB7XG4gICAgICB0aGlzLmNsaWVudC5nZXRRdWVyeUNhY2hlKCkubm90aWZ5KHtcbiAgICAgICAgdHlwZTogJ29ic2VydmVyT3B0aW9uc1VwZGF0ZWQnLFxuICAgICAgICBxdWVyeTogdGhpcy5jdXJyZW50UXVlcnksXG4gICAgICAgIG9ic2VydmVyOiB0aGlzXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5lbmFibGVkICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmVuYWJsZWQgIT09ICdib29sZWFuJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBlbmFibGVkIHRvIGJlIGEgYm9vbGVhbicpO1xuICAgIH0gLy8gS2VlcCBwcmV2aW91cyBxdWVyeSBrZXkgaWYgdGhlIHVzZXIgZG9lcyBub3Qgc3VwcGx5IG9uZVxuXG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5xdWVyeUtleSkge1xuICAgICAgdGhpcy5vcHRpb25zLnF1ZXJ5S2V5ID0gcHJldk9wdGlvbnMucXVlcnlLZXk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVRdWVyeSgpO1xuICAgIGNvbnN0IG1vdW50ZWQgPSB0aGlzLmhhc0xpc3RlbmVycygpOyAvLyBGZXRjaCBpZiB0aGVyZSBhcmUgc3Vic2NyaWJlcnNcblxuICAgIGlmIChtb3VudGVkICYmIHNob3VsZEZldGNoT3B0aW9uYWxseSh0aGlzLmN1cnJlbnRRdWVyeSwgcHJldlF1ZXJ5LCB0aGlzLm9wdGlvbnMsIHByZXZPcHRpb25zKSkge1xuICAgICAgdGhpcy5leGVjdXRlRmV0Y2goKTtcbiAgICB9IC8vIFVwZGF0ZSByZXN1bHRcblxuXG4gICAgdGhpcy51cGRhdGVSZXN1bHQobm90aWZ5T3B0aW9ucyk7IC8vIFVwZGF0ZSBzdGFsZSBpbnRlcnZhbCBpZiBuZWVkZWRcblxuICAgIGlmIChtb3VudGVkICYmICh0aGlzLmN1cnJlbnRRdWVyeSAhPT0gcHJldlF1ZXJ5IHx8IHRoaXMub3B0aW9ucy5lbmFibGVkICE9PSBwcmV2T3B0aW9ucy5lbmFibGVkIHx8IHRoaXMub3B0aW9ucy5zdGFsZVRpbWUgIT09IHByZXZPcHRpb25zLnN0YWxlVGltZSkpIHtcbiAgICAgIHRoaXMudXBkYXRlU3RhbGVUaW1lb3V0KCk7XG4gICAgfVxuXG4gICAgY29uc3QgbmV4dFJlZmV0Y2hJbnRlcnZhbCA9IHRoaXMuY29tcHV0ZVJlZmV0Y2hJbnRlcnZhbCgpOyAvLyBVcGRhdGUgcmVmZXRjaCBpbnRlcnZhbCBpZiBuZWVkZWRcblxuICAgIGlmIChtb3VudGVkICYmICh0aGlzLmN1cnJlbnRRdWVyeSAhPT0gcHJldlF1ZXJ5IHx8IHRoaXMub3B0aW9ucy5lbmFibGVkICE9PSBwcmV2T3B0aW9ucy5lbmFibGVkIHx8IG5leHRSZWZldGNoSW50ZXJ2YWwgIT09IHRoaXMuY3VycmVudFJlZmV0Y2hJbnRlcnZhbCkpIHtcbiAgICAgIHRoaXMudXBkYXRlUmVmZXRjaEludGVydmFsKG5leHRSZWZldGNoSW50ZXJ2YWwpO1xuICAgIH1cbiAgfVxuXG4gIGdldE9wdGltaXN0aWNSZXN1bHQob3B0aW9ucykge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5jbGllbnQuZ2V0UXVlcnlDYWNoZSgpLmJ1aWxkKHRoaXMuY2xpZW50LCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVSZXN1bHQocXVlcnksIG9wdGlvbnMpO1xuICB9XG5cbiAgZ2V0Q3VycmVudFJlc3VsdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UmVzdWx0O1xuICB9XG5cbiAgdHJhY2tSZXN1bHQocmVzdWx0KSB7XG4gICAgY29uc3QgdHJhY2tlZFJlc3VsdCA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRyYWNrZWRSZXN1bHQsIGtleSwge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICB0aGlzLnRyYWNrZWRQcm9wcy5hZGQoa2V5KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0W2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0cmFja2VkUmVzdWx0O1xuICB9XG5cbiAgZ2V0Q3VycmVudFF1ZXJ5KCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRRdWVyeTtcbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICB0aGlzLmNsaWVudC5nZXRRdWVyeUNhY2hlKCkucmVtb3ZlKHRoaXMuY3VycmVudFF1ZXJ5KTtcbiAgfVxuXG4gIHJlZmV0Y2goe1xuICAgIHJlZmV0Y2hQYWdlLFxuICAgIC4uLm9wdGlvbnNcbiAgfSA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goeyAuLi5vcHRpb25zLFxuICAgICAgbWV0YToge1xuICAgICAgICByZWZldGNoUGFnZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZmV0Y2hPcHRpbWlzdGljKG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWZhdWx0ZWRPcHRpb25zID0gdGhpcy5jbGllbnQuZGVmYXVsdFF1ZXJ5T3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb25zdCBxdWVyeSA9IHRoaXMuY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5idWlsZCh0aGlzLmNsaWVudCwgZGVmYXVsdGVkT3B0aW9ucyk7XG4gICAgcXVlcnkuaXNGZXRjaGluZ09wdGltaXN0aWMgPSB0cnVlO1xuICAgIHJldHVybiBxdWVyeS5mZXRjaCgpLnRoZW4oKCkgPT4gdGhpcy5jcmVhdGVSZXN1bHQocXVlcnksIGRlZmF1bHRlZE9wdGlvbnMpKTtcbiAgfVxuXG4gIGZldGNoKGZldGNoT3B0aW9ucykge1xuICAgIHZhciBfZmV0Y2hPcHRpb25zJGNhbmNlbFI7XG5cbiAgICByZXR1cm4gdGhpcy5leGVjdXRlRmV0Y2goeyAuLi5mZXRjaE9wdGlvbnMsXG4gICAgICBjYW5jZWxSZWZldGNoOiAoX2ZldGNoT3B0aW9ucyRjYW5jZWxSID0gZmV0Y2hPcHRpb25zLmNhbmNlbFJlZmV0Y2gpICE9IG51bGwgPyBfZmV0Y2hPcHRpb25zJGNhbmNlbFIgOiB0cnVlXG4gICAgfSkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZVJlc3VsdCgpO1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFJlc3VsdDtcbiAgICB9KTtcbiAgfVxuXG4gIGV4ZWN1dGVGZXRjaChmZXRjaE9wdGlvbnMpIHtcbiAgICAvLyBNYWtlIHN1cmUgd2UgcmVmZXJlbmNlIHRoZSBsYXRlc3QgcXVlcnkgYXMgdGhlIGN1cnJlbnQgb25lIG1pZ2h0IGhhdmUgYmVlbiByZW1vdmVkXG4gICAgdGhpcy51cGRhdGVRdWVyeSgpOyAvLyBGZXRjaFxuXG4gICAgbGV0IHByb21pc2UgPSB0aGlzLmN1cnJlbnRRdWVyeS5mZXRjaCh0aGlzLm9wdGlvbnMsIGZldGNoT3B0aW9ucyk7XG5cbiAgICBpZiAoIShmZXRjaE9wdGlvbnMgIT0gbnVsbCAmJiBmZXRjaE9wdGlvbnMudGhyb3dPbkVycm9yKSkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UuY2F0Y2gobm9vcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICB1cGRhdGVTdGFsZVRpbWVvdXQoKSB7XG4gICAgdGhpcy5jbGVhclN0YWxlVGltZW91dCgpO1xuXG4gICAgaWYgKGlzU2VydmVyIHx8IHRoaXMuY3VycmVudFJlc3VsdC5pc1N0YWxlIHx8ICFpc1ZhbGlkVGltZW91dCh0aGlzLm9wdGlvbnMuc3RhbGVUaW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRpbWUgPSB0aW1lVW50aWxTdGFsZSh0aGlzLmN1cnJlbnRSZXN1bHQuZGF0YVVwZGF0ZWRBdCwgdGhpcy5vcHRpb25zLnN0YWxlVGltZSk7IC8vIFRoZSB0aW1lb3V0IGlzIHNvbWV0aW1lcyB0cmlnZ2VyZWQgMSBtcyBiZWZvcmUgdGhlIHN0YWxlIHRpbWUgZXhwaXJhdGlvbi5cbiAgICAvLyBUbyBtaXRpZ2F0ZSB0aGlzIGlzc3VlIHdlIGFsd2F5cyBhZGQgMSBtcyB0byB0aGUgdGltZW91dC5cblxuICAgIGNvbnN0IHRpbWVvdXQgPSB0aW1lICsgMTtcbiAgICB0aGlzLnN0YWxlVGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuY3VycmVudFJlc3VsdC5pc1N0YWxlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUmVzdWx0KCk7XG4gICAgICB9XG4gICAgfSwgdGltZW91dCk7XG4gIH1cblxuICBjb21wdXRlUmVmZXRjaEludGVydmFsKCkge1xuICAgIHZhciBfdGhpcyRvcHRpb25zJHJlZmV0Y2g7XG5cbiAgICByZXR1cm4gdHlwZW9mIHRoaXMub3B0aW9ucy5yZWZldGNoSW50ZXJ2YWwgPT09ICdmdW5jdGlvbicgPyB0aGlzLm9wdGlvbnMucmVmZXRjaEludGVydmFsKHRoaXMuY3VycmVudFJlc3VsdC5kYXRhLCB0aGlzLmN1cnJlbnRRdWVyeSkgOiAoX3RoaXMkb3B0aW9ucyRyZWZldGNoID0gdGhpcy5vcHRpb25zLnJlZmV0Y2hJbnRlcnZhbCkgIT0gbnVsbCA/IF90aGlzJG9wdGlvbnMkcmVmZXRjaCA6IGZhbHNlO1xuICB9XG5cbiAgdXBkYXRlUmVmZXRjaEludGVydmFsKG5leHRJbnRlcnZhbCkge1xuICAgIHRoaXMuY2xlYXJSZWZldGNoSW50ZXJ2YWwoKTtcbiAgICB0aGlzLmN1cnJlbnRSZWZldGNoSW50ZXJ2YWwgPSBuZXh0SW50ZXJ2YWw7XG5cbiAgICBpZiAoaXNTZXJ2ZXIgfHwgdGhpcy5vcHRpb25zLmVuYWJsZWQgPT09IGZhbHNlIHx8ICFpc1ZhbGlkVGltZW91dCh0aGlzLmN1cnJlbnRSZWZldGNoSW50ZXJ2YWwpIHx8IHRoaXMuY3VycmVudFJlZmV0Y2hJbnRlcnZhbCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVmZXRjaEludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJlZmV0Y2hJbnRlcnZhbEluQmFja2dyb3VuZCB8fCBmb2N1c01hbmFnZXIuaXNGb2N1c2VkKCkpIHtcbiAgICAgICAgdGhpcy5leGVjdXRlRmV0Y2goKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLmN1cnJlbnRSZWZldGNoSW50ZXJ2YWwpO1xuICB9XG5cbiAgdXBkYXRlVGltZXJzKCkge1xuICAgIHRoaXMudXBkYXRlU3RhbGVUaW1lb3V0KCk7XG4gICAgdGhpcy51cGRhdGVSZWZldGNoSW50ZXJ2YWwodGhpcy5jb21wdXRlUmVmZXRjaEludGVydmFsKCkpO1xuICB9XG5cbiAgY2xlYXJTdGFsZVRpbWVvdXQoKSB7XG4gICAgaWYgKHRoaXMuc3RhbGVUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YWxlVGltZW91dElkKTtcbiAgICAgIHRoaXMuc3RhbGVUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgY2xlYXJSZWZldGNoSW50ZXJ2YWwoKSB7XG4gICAgaWYgKHRoaXMucmVmZXRjaEludGVydmFsSWQpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWZldGNoSW50ZXJ2YWxJZCk7XG4gICAgICB0aGlzLnJlZmV0Y2hJbnRlcnZhbElkID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZVJlc3VsdChxdWVyeSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHByZXZRdWVyeSA9IHRoaXMuY3VycmVudFF1ZXJ5O1xuICAgIGNvbnN0IHByZXZPcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHByZXZSZXN1bHQgPSB0aGlzLmN1cnJlbnRSZXN1bHQ7XG4gICAgY29uc3QgcHJldlJlc3VsdFN0YXRlID0gdGhpcy5jdXJyZW50UmVzdWx0U3RhdGU7XG4gICAgY29uc3QgcHJldlJlc3VsdE9wdGlvbnMgPSB0aGlzLmN1cnJlbnRSZXN1bHRPcHRpb25zO1xuICAgIGNvbnN0IHF1ZXJ5Q2hhbmdlID0gcXVlcnkgIT09IHByZXZRdWVyeTtcbiAgICBjb25zdCBxdWVyeUluaXRpYWxTdGF0ZSA9IHF1ZXJ5Q2hhbmdlID8gcXVlcnkuc3RhdGUgOiB0aGlzLmN1cnJlbnRRdWVyeUluaXRpYWxTdGF0ZTtcbiAgICBjb25zdCBwcmV2UXVlcnlSZXN1bHQgPSBxdWVyeUNoYW5nZSA/IHRoaXMuY3VycmVudFJlc3VsdCA6IHRoaXMucHJldmlvdXNRdWVyeVJlc3VsdDtcbiAgICBjb25zdCB7XG4gICAgICBzdGF0ZVxuICAgIH0gPSBxdWVyeTtcbiAgICBsZXQge1xuICAgICAgZGF0YVVwZGF0ZWRBdCxcbiAgICAgIGVycm9yLFxuICAgICAgZXJyb3JVcGRhdGVkQXQsXG4gICAgICBmZXRjaFN0YXR1cyxcbiAgICAgIHN0YXR1c1xuICAgIH0gPSBzdGF0ZTtcbiAgICBsZXQgaXNQcmV2aW91c0RhdGEgPSBmYWxzZTtcbiAgICBsZXQgaXNQbGFjZWhvbGRlckRhdGEgPSBmYWxzZTtcbiAgICBsZXQgZGF0YTsgLy8gT3B0aW1pc3RpY2FsbHkgc2V0IHJlc3VsdCBpbiBmZXRjaGluZyBzdGF0ZSBpZiBuZWVkZWRcblxuICAgIGlmIChvcHRpb25zLl9vcHRpbWlzdGljUmVzdWx0cykge1xuICAgICAgY29uc3QgbW91bnRlZCA9IHRoaXMuaGFzTGlzdGVuZXJzKCk7XG4gICAgICBjb25zdCBmZXRjaE9uTW91bnQgPSAhbW91bnRlZCAmJiBzaG91bGRGZXRjaE9uTW91bnQocXVlcnksIG9wdGlvbnMpO1xuICAgICAgY29uc3QgZmV0Y2hPcHRpb25hbGx5ID0gbW91bnRlZCAmJiBzaG91bGRGZXRjaE9wdGlvbmFsbHkocXVlcnksIHByZXZRdWVyeSwgb3B0aW9ucywgcHJldk9wdGlvbnMpO1xuXG4gICAgICBpZiAoZmV0Y2hPbk1vdW50IHx8IGZldGNoT3B0aW9uYWxseSkge1xuICAgICAgICBmZXRjaFN0YXR1cyA9IGNhbkZldGNoKHF1ZXJ5Lm9wdGlvbnMubmV0d29ya01vZGUpID8gJ2ZldGNoaW5nJyA6ICdwYXVzZWQnO1xuXG4gICAgICAgIGlmICghZGF0YVVwZGF0ZWRBdCkge1xuICAgICAgICAgIHN0YXR1cyA9ICdsb2FkaW5nJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5fb3B0aW1pc3RpY1Jlc3VsdHMgPT09ICdpc1Jlc3RvcmluZycpIHtcbiAgICAgICAgZmV0Y2hTdGF0dXMgPSAnaWRsZSc7XG4gICAgICB9XG4gICAgfSAvLyBLZWVwIHByZXZpb3VzIGRhdGEgaWYgbmVlZGVkXG5cblxuICAgIGlmIChvcHRpb25zLmtlZXBQcmV2aW91c0RhdGEgJiYgIXN0YXRlLmRhdGFVcGRhdGVkQXQgJiYgcHJldlF1ZXJ5UmVzdWx0ICE9IG51bGwgJiYgcHJldlF1ZXJ5UmVzdWx0LmlzU3VjY2VzcyAmJiBzdGF0dXMgIT09ICdlcnJvcicpIHtcbiAgICAgIGRhdGEgPSBwcmV2UXVlcnlSZXN1bHQuZGF0YTtcbiAgICAgIGRhdGFVcGRhdGVkQXQgPSBwcmV2UXVlcnlSZXN1bHQuZGF0YVVwZGF0ZWRBdDtcbiAgICAgIHN0YXR1cyA9IHByZXZRdWVyeVJlc3VsdC5zdGF0dXM7XG4gICAgICBpc1ByZXZpb3VzRGF0YSA9IHRydWU7XG4gICAgfSAvLyBTZWxlY3QgZGF0YSBpZiBuZWVkZWRcbiAgICBlbHNlIGlmIChvcHRpb25zLnNlbGVjdCAmJiB0eXBlb2Ygc3RhdGUuZGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIE1lbW9pemUgc2VsZWN0IHJlc3VsdFxuICAgICAgaWYgKHByZXZSZXN1bHQgJiYgc3RhdGUuZGF0YSA9PT0gKHByZXZSZXN1bHRTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogcHJldlJlc3VsdFN0YXRlLmRhdGEpICYmIG9wdGlvbnMuc2VsZWN0ID09PSB0aGlzLnNlbGVjdEZuKSB7XG4gICAgICAgIGRhdGEgPSB0aGlzLnNlbGVjdFJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RGbiA9IG9wdGlvbnMuc2VsZWN0O1xuICAgICAgICAgIGRhdGEgPSBvcHRpb25zLnNlbGVjdChzdGF0ZS5kYXRhKTtcbiAgICAgICAgICBkYXRhID0gcmVwbGFjZURhdGEocHJldlJlc3VsdCA9PSBudWxsID8gdm9pZCAwIDogcHJldlJlc3VsdC5kYXRhLCBkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgICB0aGlzLnNlbGVjdFJlc3VsdCA9IGRhdGE7XG4gICAgICAgICAgdGhpcy5zZWxlY3RFcnJvciA9IG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKHNlbGVjdEVycm9yKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50LmdldExvZ2dlcigpLmVycm9yKHNlbGVjdEVycm9yKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnNlbGVjdEVycm9yID0gc2VsZWN0RXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIFVzZSBxdWVyeSBkYXRhXG4gICAgZWxzZSB7XG4gICAgICBkYXRhID0gc3RhdGUuZGF0YTtcbiAgICB9IC8vIFNob3cgcGxhY2Vob2xkZXIgZGF0YSBpZiBuZWVkZWRcblxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnBsYWNlaG9sZGVyRGF0YSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnICYmIHN0YXR1cyA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICBsZXQgcGxhY2Vob2xkZXJEYXRhOyAvLyBNZW1vaXplIHBsYWNlaG9sZGVyIGRhdGFcblxuICAgICAgaWYgKHByZXZSZXN1bHQgIT0gbnVsbCAmJiBwcmV2UmVzdWx0LmlzUGxhY2Vob2xkZXJEYXRhICYmIG9wdGlvbnMucGxhY2Vob2xkZXJEYXRhID09PSAocHJldlJlc3VsdE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IHByZXZSZXN1bHRPcHRpb25zLnBsYWNlaG9sZGVyRGF0YSkpIHtcbiAgICAgICAgcGxhY2Vob2xkZXJEYXRhID0gcHJldlJlc3VsdC5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGxhY2Vob2xkZXJEYXRhID0gdHlwZW9mIG9wdGlvbnMucGxhY2Vob2xkZXJEYXRhID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5wbGFjZWhvbGRlckRhdGEoKSA6IG9wdGlvbnMucGxhY2Vob2xkZXJEYXRhO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNlbGVjdCAmJiB0eXBlb2YgcGxhY2Vob2xkZXJEYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlckRhdGEgPSBvcHRpb25zLnNlbGVjdChwbGFjZWhvbGRlckRhdGEpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RFcnJvciA9IG51bGw7XG4gICAgICAgICAgfSBjYXRjaCAoc2VsZWN0RXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHRoaXMuY2xpZW50LmdldExvZ2dlcigpLmVycm9yKHNlbGVjdEVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZWxlY3RFcnJvciA9IHNlbGVjdEVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyRGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICBkYXRhID0gcmVwbGFjZURhdGEocHJldlJlc3VsdCA9PSBudWxsID8gdm9pZCAwIDogcHJldlJlc3VsdC5kYXRhLCBwbGFjZWhvbGRlckRhdGEsIG9wdGlvbnMpO1xuICAgICAgICBpc1BsYWNlaG9sZGVyRGF0YSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2VsZWN0RXJyb3IpIHtcbiAgICAgIGVycm9yID0gdGhpcy5zZWxlY3RFcnJvcjtcbiAgICAgIGRhdGEgPSB0aGlzLnNlbGVjdFJlc3VsdDtcbiAgICAgIGVycm9yVXBkYXRlZEF0ID0gRGF0ZS5ub3coKTtcbiAgICAgIHN0YXR1cyA9ICdlcnJvcic7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGZXRjaGluZyA9IGZldGNoU3RhdHVzID09PSAnZmV0Y2hpbmcnO1xuICAgIGNvbnN0IGlzTG9hZGluZyA9IHN0YXR1cyA9PT0gJ2xvYWRpbmcnO1xuICAgIGNvbnN0IGlzRXJyb3IgPSBzdGF0dXMgPT09ICdlcnJvcic7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgc3RhdHVzLFxuICAgICAgZmV0Y2hTdGF0dXMsXG4gICAgICBpc0xvYWRpbmcsXG4gICAgICBpc1N1Y2Nlc3M6IHN0YXR1cyA9PT0gJ3N1Y2Nlc3MnLFxuICAgICAgaXNFcnJvcixcbiAgICAgIGlzSW5pdGlhbExvYWRpbmc6IGlzTG9hZGluZyAmJiBpc0ZldGNoaW5nLFxuICAgICAgZGF0YSxcbiAgICAgIGRhdGFVcGRhdGVkQXQsXG4gICAgICBlcnJvcixcbiAgICAgIGVycm9yVXBkYXRlZEF0LFxuICAgICAgZmFpbHVyZUNvdW50OiBzdGF0ZS5mZXRjaEZhaWx1cmVDb3VudCxcbiAgICAgIGZhaWx1cmVSZWFzb246IHN0YXRlLmZldGNoRmFpbHVyZVJlYXNvbixcbiAgICAgIGVycm9yVXBkYXRlQ291bnQ6IHN0YXRlLmVycm9yVXBkYXRlQ291bnQsXG4gICAgICBpc0ZldGNoZWQ6IHN0YXRlLmRhdGFVcGRhdGVDb3VudCA+IDAgfHwgc3RhdGUuZXJyb3JVcGRhdGVDb3VudCA+IDAsXG4gICAgICBpc0ZldGNoZWRBZnRlck1vdW50OiBzdGF0ZS5kYXRhVXBkYXRlQ291bnQgPiBxdWVyeUluaXRpYWxTdGF0ZS5kYXRhVXBkYXRlQ291bnQgfHwgc3RhdGUuZXJyb3JVcGRhdGVDb3VudCA+IHF1ZXJ5SW5pdGlhbFN0YXRlLmVycm9yVXBkYXRlQ291bnQsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgaXNSZWZldGNoaW5nOiBpc0ZldGNoaW5nICYmICFpc0xvYWRpbmcsXG4gICAgICBpc0xvYWRpbmdFcnJvcjogaXNFcnJvciAmJiBzdGF0ZS5kYXRhVXBkYXRlZEF0ID09PSAwLFxuICAgICAgaXNQYXVzZWQ6IGZldGNoU3RhdHVzID09PSAncGF1c2VkJyxcbiAgICAgIGlzUGxhY2Vob2xkZXJEYXRhLFxuICAgICAgaXNQcmV2aW91c0RhdGEsXG4gICAgICBpc1JlZmV0Y2hFcnJvcjogaXNFcnJvciAmJiBzdGF0ZS5kYXRhVXBkYXRlZEF0ICE9PSAwLFxuICAgICAgaXNTdGFsZTogaXNTdGFsZShxdWVyeSwgb3B0aW9ucyksXG4gICAgICByZWZldGNoOiB0aGlzLnJlZmV0Y2gsXG4gICAgICByZW1vdmU6IHRoaXMucmVtb3ZlXG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdXBkYXRlUmVzdWx0KG5vdGlmeU9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmV2UmVzdWx0ID0gdGhpcy5jdXJyZW50UmVzdWx0O1xuICAgIGNvbnN0IG5leHRSZXN1bHQgPSB0aGlzLmNyZWF0ZVJlc3VsdCh0aGlzLmN1cnJlbnRRdWVyeSwgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmN1cnJlbnRSZXN1bHRTdGF0ZSA9IHRoaXMuY3VycmVudFF1ZXJ5LnN0YXRlO1xuICAgIHRoaXMuY3VycmVudFJlc3VsdE9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7IC8vIE9ubHkgbm90aWZ5IGFuZCB1cGRhdGUgcmVzdWx0IGlmIHNvbWV0aGluZyBoYXMgY2hhbmdlZFxuXG4gICAgaWYgKHNoYWxsb3dFcXVhbE9iamVjdHMobmV4dFJlc3VsdCwgcHJldlJlc3VsdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRSZXN1bHQgPSBuZXh0UmVzdWx0OyAvLyBEZXRlcm1pbmUgd2hpY2ggY2FsbGJhY2tzIHRvIHRyaWdnZXJcblxuICAgIGNvbnN0IGRlZmF1bHROb3RpZnlPcHRpb25zID0ge1xuICAgICAgY2FjaGU6IHRydWVcbiAgICB9O1xuXG4gICAgY29uc3Qgc2hvdWxkTm90aWZ5TGlzdGVuZXJzID0gKCkgPT4ge1xuICAgICAgaWYgKCFwcmV2UmVzdWx0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7XG4gICAgICAgIG5vdGlmeU9uQ2hhbmdlUHJvcHNcbiAgICAgIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmIChub3RpZnlPbkNoYW5nZVByb3BzID09PSAnYWxsJyB8fCAhbm90aWZ5T25DaGFuZ2VQcm9wcyAmJiAhdGhpcy50cmFja2VkUHJvcHMuc2l6ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5jbHVkZWRQcm9wcyA9IG5ldyBTZXQobm90aWZ5T25DaGFuZ2VQcm9wcyAhPSBudWxsID8gbm90aWZ5T25DaGFuZ2VQcm9wcyA6IHRoaXMudHJhY2tlZFByb3BzKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy51c2VFcnJvckJvdW5kYXJ5KSB7XG4gICAgICAgIGluY2x1ZGVkUHJvcHMuYWRkKCdlcnJvcicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5jdXJyZW50UmVzdWx0KS5zb21lKGtleSA9PiB7XG4gICAgICAgIGNvbnN0IHR5cGVkS2V5ID0ga2V5O1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5jdXJyZW50UmVzdWx0W3R5cGVkS2V5XSAhPT0gcHJldlJlc3VsdFt0eXBlZEtleV07XG4gICAgICAgIHJldHVybiBjaGFuZ2VkICYmIGluY2x1ZGVkUHJvcHMuaGFzKHR5cGVkS2V5KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoKG5vdGlmeU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG5vdGlmeU9wdGlvbnMubGlzdGVuZXJzKSAhPT0gZmFsc2UgJiYgc2hvdWxkTm90aWZ5TGlzdGVuZXJzKCkpIHtcbiAgICAgIGRlZmF1bHROb3RpZnlPcHRpb25zLmxpc3RlbmVycyA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5ub3RpZnkoeyAuLi5kZWZhdWx0Tm90aWZ5T3B0aW9ucyxcbiAgICAgIC4uLm5vdGlmeU9wdGlvbnNcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVF1ZXJ5KCkge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5jbGllbnQuZ2V0UXVlcnlDYWNoZSgpLmJ1aWxkKHRoaXMuY2xpZW50LCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgaWYgKHF1ZXJ5ID09PSB0aGlzLmN1cnJlbnRRdWVyeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHByZXZRdWVyeSA9IHRoaXMuY3VycmVudFF1ZXJ5O1xuICAgIHRoaXMuY3VycmVudFF1ZXJ5ID0gcXVlcnk7XG4gICAgdGhpcy5jdXJyZW50UXVlcnlJbml0aWFsU3RhdGUgPSBxdWVyeS5zdGF0ZTtcbiAgICB0aGlzLnByZXZpb3VzUXVlcnlSZXN1bHQgPSB0aGlzLmN1cnJlbnRSZXN1bHQ7XG5cbiAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgcHJldlF1ZXJ5ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UXVlcnkucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICBxdWVyeS5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICB9XG4gIH1cblxuICBvblF1ZXJ5VXBkYXRlKGFjdGlvbikge1xuICAgIGNvbnN0IG5vdGlmeU9wdGlvbnMgPSB7fTtcblxuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICBub3RpZnlPcHRpb25zLm9uU3VjY2VzcyA9ICFhY3Rpb24ubWFudWFsO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09ICdlcnJvcicgJiYgIWlzQ2FuY2VsbGVkRXJyb3IoYWN0aW9uLmVycm9yKSkge1xuICAgICAgbm90aWZ5T3B0aW9ucy5vbkVycm9yID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVJlc3VsdChub3RpZnlPcHRpb25zKTtcblxuICAgIGlmICh0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB0aGlzLnVwZGF0ZVRpbWVycygpO1xuICAgIH1cbiAgfVxuXG4gIG5vdGlmeShub3RpZnlPcHRpb25zKSB7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICAvLyBGaXJzdCB0cmlnZ2VyIHRoZSBjb25maWd1cmF0aW9uIGNhbGxiYWNrc1xuICAgICAgaWYgKG5vdGlmeU9wdGlvbnMub25TdWNjZXNzKSB7XG4gICAgICAgIHZhciBfdGhpcyRvcHRpb25zJG9uU3VjY2UsIF90aGlzJG9wdGlvbnMsIF90aGlzJG9wdGlvbnMkb25TZXR0bCwgX3RoaXMkb3B0aW9uczI7XG5cbiAgICAgICAgKF90aGlzJG9wdGlvbnMkb25TdWNjZSA9IChfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zKS5vblN1Y2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRvcHRpb25zJG9uU3VjY2UuY2FsbChfdGhpcyRvcHRpb25zLCB0aGlzLmN1cnJlbnRSZXN1bHQuZGF0YSk7XG4gICAgICAgIChfdGhpcyRvcHRpb25zJG9uU2V0dGwgPSAoX3RoaXMkb3B0aW9uczIgPSB0aGlzLm9wdGlvbnMpLm9uU2V0dGxlZCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG9wdGlvbnMkb25TZXR0bC5jYWxsKF90aGlzJG9wdGlvbnMyLCB0aGlzLmN1cnJlbnRSZXN1bHQuZGF0YSwgbnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKG5vdGlmeU9wdGlvbnMub25FcnJvcikge1xuICAgICAgICB2YXIgX3RoaXMkb3B0aW9ucyRvbkVycm9yLCBfdGhpcyRvcHRpb25zMywgX3RoaXMkb3B0aW9ucyRvblNldHRsMiwgX3RoaXMkb3B0aW9uczQ7XG5cbiAgICAgICAgKF90aGlzJG9wdGlvbnMkb25FcnJvciA9IChfdGhpcyRvcHRpb25zMyA9IHRoaXMub3B0aW9ucykub25FcnJvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG9wdGlvbnMkb25FcnJvci5jYWxsKF90aGlzJG9wdGlvbnMzLCB0aGlzLmN1cnJlbnRSZXN1bHQuZXJyb3IpO1xuICAgICAgICAoX3RoaXMkb3B0aW9ucyRvblNldHRsMiA9IChfdGhpcyRvcHRpb25zNCA9IHRoaXMub3B0aW9ucykub25TZXR0bGVkKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkb3B0aW9ucyRvblNldHRsMi5jYWxsKF90aGlzJG9wdGlvbnM0LCB1bmRlZmluZWQsIHRoaXMuY3VycmVudFJlc3VsdC5lcnJvcik7XG4gICAgICB9IC8vIFRoZW4gdHJpZ2dlciB0aGUgbGlzdGVuZXJzXG5cblxuICAgICAgaWYgKG5vdGlmeU9wdGlvbnMubGlzdGVuZXJzKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xuICAgICAgICAgIGxpc3RlbmVyKHRoaXMuY3VycmVudFJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBUaGVuIHRoZSBjYWNoZSBsaXN0ZW5lcnNcblxuXG4gICAgICBpZiAobm90aWZ5T3B0aW9ucy5jYWNoZSkge1xuICAgICAgICB0aGlzLmNsaWVudC5nZXRRdWVyeUNhY2hlKCkubm90aWZ5KHtcbiAgICAgICAgICBxdWVyeTogdGhpcy5jdXJyZW50UXVlcnksXG4gICAgICAgICAgdHlwZTogJ29ic2VydmVyUmVzdWx0c1VwZGF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gc2hvdWxkTG9hZE9uTW91bnQocXVlcnksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZW5hYmxlZCAhPT0gZmFsc2UgJiYgIXF1ZXJ5LnN0YXRlLmRhdGFVcGRhdGVkQXQgJiYgIShxdWVyeS5zdGF0ZS5zdGF0dXMgPT09ICdlcnJvcicgJiYgb3B0aW9ucy5yZXRyeU9uTW91bnQgPT09IGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkRmV0Y2hPbk1vdW50KHF1ZXJ5LCBvcHRpb25zKSB7XG4gIHJldHVybiBzaG91bGRMb2FkT25Nb3VudChxdWVyeSwgb3B0aW9ucykgfHwgcXVlcnkuc3RhdGUuZGF0YVVwZGF0ZWRBdCA+IDAgJiYgc2hvdWxkRmV0Y2hPbihxdWVyeSwgb3B0aW9ucywgb3B0aW9ucy5yZWZldGNoT25Nb3VudCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZEZldGNoT24ocXVlcnksIG9wdGlvbnMsIGZpZWxkKSB7XG4gIGlmIChvcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlKSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgZmllbGQgPT09ICdmdW5jdGlvbicgPyBmaWVsZChxdWVyeSkgOiBmaWVsZDtcbiAgICByZXR1cm4gdmFsdWUgPT09ICdhbHdheXMnIHx8IHZhbHVlICE9PSBmYWxzZSAmJiBpc1N0YWxlKHF1ZXJ5LCBvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkRmV0Y2hPcHRpb25hbGx5KHF1ZXJ5LCBwcmV2UXVlcnksIG9wdGlvbnMsIHByZXZPcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlICYmIChxdWVyeSAhPT0gcHJldlF1ZXJ5IHx8IHByZXZPcHRpb25zLmVuYWJsZWQgPT09IGZhbHNlKSAmJiAoIW9wdGlvbnMuc3VzcGVuc2UgfHwgcXVlcnkuc3RhdGUuc3RhdHVzICE9PSAnZXJyb3InKSAmJiBpc1N0YWxlKHF1ZXJ5LCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaXNTdGFsZShxdWVyeSwgb3B0aW9ucykge1xuICByZXR1cm4gcXVlcnkuaXNTdGFsZUJ5VGltZShvcHRpb25zLnN0YWxlVGltZSk7XG59XG5cbmV4cG9ydCB7IFF1ZXJ5T2JzZXJ2ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5T2JzZXJ2ZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbInNoYWxsb3dFcXVhbE9iamVjdHMiLCJub29wIiwiaXNTZXJ2ZXIiLCJpc1ZhbGlkVGltZW91dCIsInRpbWVVbnRpbFN0YWxlIiwicmVwbGFjZURhdGEiLCJub3RpZnlNYW5hZ2VyIiwiZm9jdXNNYW5hZ2VyIiwiU3Vic2NyaWJhYmxlIiwiY2FuRmV0Y2giLCJpc0NhbmNlbGxlZEVycm9yIiwiUXVlcnlPYnNlcnZlciIsImNvbnN0cnVjdG9yIiwiY2xpZW50Iiwib3B0aW9ucyIsInRyYWNrZWRQcm9wcyIsIlNldCIsInNlbGVjdEVycm9yIiwiYmluZE1ldGhvZHMiLCJzZXRPcHRpb25zIiwicmVtb3ZlIiwiYmluZCIsInJlZmV0Y2giLCJvblN1YnNjcmliZSIsImxpc3RlbmVycyIsImxlbmd0aCIsImN1cnJlbnRRdWVyeSIsImFkZE9ic2VydmVyIiwic2hvdWxkRmV0Y2hPbk1vdW50IiwiZXhlY3V0ZUZldGNoIiwidXBkYXRlVGltZXJzIiwib25VbnN1YnNjcmliZSIsImRlc3Ryb3kiLCJzaG91bGRGZXRjaE9uUmVjb25uZWN0Iiwic2hvdWxkRmV0Y2hPbiIsInJlZmV0Y2hPblJlY29ubmVjdCIsInNob3VsZEZldGNoT25XaW5kb3dGb2N1cyIsInJlZmV0Y2hPbldpbmRvd0ZvY3VzIiwiY2xlYXJTdGFsZVRpbWVvdXQiLCJjbGVhclJlZmV0Y2hJbnRlcnZhbCIsInJlbW92ZU9ic2VydmVyIiwibm90aWZ5T3B0aW9ucyIsInByZXZPcHRpb25zIiwicHJldlF1ZXJ5IiwiZGVmYXVsdFF1ZXJ5T3B0aW9ucyIsInByb2Nlc3MiLCJpc0RhdGFFcXVhbCIsImdldExvZ2dlciIsImVycm9yIiwiZ2V0UXVlcnlDYWNoZSIsIm5vdGlmeSIsInR5cGUiLCJxdWVyeSIsIm9ic2VydmVyIiwiZW5hYmxlZCIsIkVycm9yIiwicXVlcnlLZXkiLCJ1cGRhdGVRdWVyeSIsIm1vdW50ZWQiLCJoYXNMaXN0ZW5lcnMiLCJzaG91bGRGZXRjaE9wdGlvbmFsbHkiLCJ1cGRhdGVSZXN1bHQiLCJzdGFsZVRpbWUiLCJ1cGRhdGVTdGFsZVRpbWVvdXQiLCJuZXh0UmVmZXRjaEludGVydmFsIiwiY29tcHV0ZVJlZmV0Y2hJbnRlcnZhbCIsImN1cnJlbnRSZWZldGNoSW50ZXJ2YWwiLCJ1cGRhdGVSZWZldGNoSW50ZXJ2YWwiLCJnZXRPcHRpbWlzdGljUmVzdWx0IiwiYnVpbGQiLCJjcmVhdGVSZXN1bHQiLCJnZXRDdXJyZW50UmVzdWx0IiwiY3VycmVudFJlc3VsdCIsInRyYWNrUmVzdWx0IiwicmVzdWx0IiwidHJhY2tlZFJlc3VsdCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiYWRkIiwiZ2V0Q3VycmVudFF1ZXJ5IiwicmVmZXRjaFBhZ2UiLCJmZXRjaCIsIm1ldGEiLCJmZXRjaE9wdGltaXN0aWMiLCJkZWZhdWx0ZWRPcHRpb25zIiwiaXNGZXRjaGluZ09wdGltaXN0aWMiLCJ0aGVuIiwiZmV0Y2hPcHRpb25zIiwiX2ZldGNoT3B0aW9ucyRjYW5jZWxSIiwiY2FuY2VsUmVmZXRjaCIsInByb21pc2UiLCJ0aHJvd09uRXJyb3IiLCJjYXRjaCIsImlzU3RhbGUiLCJ0aW1lIiwiZGF0YVVwZGF0ZWRBdCIsInRpbWVvdXQiLCJzdGFsZVRpbWVvdXRJZCIsInNldFRpbWVvdXQiLCJfdGhpcyRvcHRpb25zJHJlZmV0Y2giLCJyZWZldGNoSW50ZXJ2YWwiLCJkYXRhIiwibmV4dEludGVydmFsIiwicmVmZXRjaEludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsInJlZmV0Y2hJbnRlcnZhbEluQmFja2dyb3VuZCIsImlzRm9jdXNlZCIsImNsZWFyVGltZW91dCIsInVuZGVmaW5lZCIsImNsZWFySW50ZXJ2YWwiLCJwcmV2UmVzdWx0IiwicHJldlJlc3VsdFN0YXRlIiwiY3VycmVudFJlc3VsdFN0YXRlIiwicHJldlJlc3VsdE9wdGlvbnMiLCJjdXJyZW50UmVzdWx0T3B0aW9ucyIsInF1ZXJ5Q2hhbmdlIiwicXVlcnlJbml0aWFsU3RhdGUiLCJzdGF0ZSIsImN1cnJlbnRRdWVyeUluaXRpYWxTdGF0ZSIsInByZXZRdWVyeVJlc3VsdCIsInByZXZpb3VzUXVlcnlSZXN1bHQiLCJlcnJvclVwZGF0ZWRBdCIsImZldGNoU3RhdHVzIiwic3RhdHVzIiwiaXNQcmV2aW91c0RhdGEiLCJpc1BsYWNlaG9sZGVyRGF0YSIsIl9vcHRpbWlzdGljUmVzdWx0cyIsImZldGNoT25Nb3VudCIsImZldGNoT3B0aW9uYWxseSIsIm5ldHdvcmtNb2RlIiwia2VlcFByZXZpb3VzRGF0YSIsImlzU3VjY2VzcyIsInNlbGVjdCIsInNlbGVjdEZuIiwic2VsZWN0UmVzdWx0IiwicGxhY2Vob2xkZXJEYXRhIiwiRGF0ZSIsIm5vdyIsImlzRmV0Y2hpbmciLCJpc0xvYWRpbmciLCJpc0Vycm9yIiwiaXNJbml0aWFsTG9hZGluZyIsImZhaWx1cmVDb3VudCIsImZldGNoRmFpbHVyZUNvdW50IiwiZmFpbHVyZVJlYXNvbiIsImZldGNoRmFpbHVyZVJlYXNvbiIsImVycm9yVXBkYXRlQ291bnQiLCJpc0ZldGNoZWQiLCJkYXRhVXBkYXRlQ291bnQiLCJpc0ZldGNoZWRBZnRlck1vdW50IiwiaXNSZWZldGNoaW5nIiwiaXNMb2FkaW5nRXJyb3IiLCJpc1BhdXNlZCIsImlzUmVmZXRjaEVycm9yIiwibmV4dFJlc3VsdCIsImRlZmF1bHROb3RpZnlPcHRpb25zIiwiY2FjaGUiLCJzaG91bGROb3RpZnlMaXN0ZW5lcnMiLCJub3RpZnlPbkNoYW5nZVByb3BzIiwic2l6ZSIsImluY2x1ZGVkUHJvcHMiLCJ1c2VFcnJvckJvdW5kYXJ5Iiwic29tZSIsInR5cGVkS2V5IiwiY2hhbmdlZCIsImhhcyIsIm9uUXVlcnlVcGRhdGUiLCJhY3Rpb24iLCJvblN1Y2Nlc3MiLCJtYW51YWwiLCJvbkVycm9yIiwiYmF0Y2giLCJfdGhpcyRvcHRpb25zJG9uU3VjY2UiLCJfdGhpcyRvcHRpb25zIiwiX3RoaXMkb3B0aW9ucyRvblNldHRsIiwiX3RoaXMkb3B0aW9uczIiLCJjYWxsIiwib25TZXR0bGVkIiwiX3RoaXMkb3B0aW9ucyRvbkVycm9yIiwiX3RoaXMkb3B0aW9uczMiLCJfdGhpcyRvcHRpb25zJG9uU2V0dGwyIiwiX3RoaXMkb3B0aW9uczQiLCJsaXN0ZW5lciIsInNob3VsZExvYWRPbk1vdW50IiwicmV0cnlPbk1vdW50IiwicmVmZXRjaE9uTW91bnQiLCJmaWVsZCIsInZhbHVlIiwic3VzcGVuc2UiLCJpc1N0YWxlQnlUaW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/removable.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/removable.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Removable: () => (/* binding */ Removable)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\nclass Removable {\n    destroy() {\n        this.clearGcTimeout();\n    }\n    scheduleGc() {\n        this.clearGcTimeout();\n        if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidTimeout)(this.cacheTime)) {\n            this.gcTimeout = setTimeout(()=>{\n                this.optionalRemove();\n            }, this.cacheTime);\n        }\n    }\n    updateCacheTime(newCacheTime) {\n        // Default to 5 minutes (Infinity for server-side) if no cache time is set\n        this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isServer ? Infinity : 5 * 60 * 1000);\n    }\n    clearGcTimeout() {\n        if (this.gcTimeout) {\n            clearTimeout(this.gcTimeout);\n            this.gcTimeout = undefined;\n        }\n    }\n}\n //# sourceMappingURL=removable.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL3JlbW92YWJsZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUQ7QUFFdkQsTUFBTUU7SUFDSkMsVUFBVTtRQUNSLElBQUksQ0FBQ0MsY0FBYztJQUNyQjtJQUVBQyxhQUFhO1FBQ1gsSUFBSSxDQUFDRCxjQUFjO1FBRW5CLElBQUlKLDBEQUFjQSxDQUFDLElBQUksQ0FBQ00sU0FBUyxHQUFHO1lBQ2xDLElBQUksQ0FBQ0MsU0FBUyxHQUFHQyxXQUFXO2dCQUMxQixJQUFJLENBQUNDLGNBQWM7WUFDckIsR0FBRyxJQUFJLENBQUNILFNBQVM7UUFDbkI7SUFDRjtJQUVBSSxnQkFBZ0JDLFlBQVksRUFBRTtRQUM1QiwwRUFBMEU7UUFDMUUsSUFBSSxDQUFDTCxTQUFTLEdBQUdNLEtBQUtDLEdBQUcsQ0FBQyxJQUFJLENBQUNQLFNBQVMsSUFBSSxHQUFHSyxnQkFBZ0IsT0FBT0EsZUFBZVYsZ0RBQVFBLEdBQUdhLFdBQVcsSUFBSSxLQUFLO0lBQ3RIO0lBRUFWLGlCQUFpQjtRQUNmLElBQUksSUFBSSxDQUFDRyxTQUFTLEVBQUU7WUFDbEJRLGFBQWEsSUFBSSxDQUFDUixTQUFTO1lBQzNCLElBQUksQ0FBQ0EsU0FBUyxHQUFHUztRQUNuQjtJQUNGO0FBRUY7QUFFcUIsQ0FDckIsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFuZGluZy8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9saWIvcmVtb3ZhYmxlLm1qcz8wYjEwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVmFsaWRUaW1lb3V0LCBpc1NlcnZlciB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY2xhc3MgUmVtb3ZhYmxlIHtcbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmNsZWFyR2NUaW1lb3V0KCk7XG4gIH1cblxuICBzY2hlZHVsZUdjKCkge1xuICAgIHRoaXMuY2xlYXJHY1RpbWVvdXQoKTtcblxuICAgIGlmIChpc1ZhbGlkVGltZW91dCh0aGlzLmNhY2hlVGltZSkpIHtcbiAgICAgIHRoaXMuZ2NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMub3B0aW9uYWxSZW1vdmUoKTtcbiAgICAgIH0sIHRoaXMuY2FjaGVUaW1lKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVDYWNoZVRpbWUobmV3Q2FjaGVUaW1lKSB7XG4gICAgLy8gRGVmYXVsdCB0byA1IG1pbnV0ZXMgKEluZmluaXR5IGZvciBzZXJ2ZXItc2lkZSkgaWYgbm8gY2FjaGUgdGltZSBpcyBzZXRcbiAgICB0aGlzLmNhY2hlVGltZSA9IE1hdGgubWF4KHRoaXMuY2FjaGVUaW1lIHx8IDAsIG5ld0NhY2hlVGltZSAhPSBudWxsID8gbmV3Q2FjaGVUaW1lIDogaXNTZXJ2ZXIgPyBJbmZpbml0eSA6IDUgKiA2MCAqIDEwMDApO1xuICB9XG5cbiAgY2xlYXJHY1RpbWVvdXQoKSB7XG4gICAgaWYgKHRoaXMuZ2NUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5nY1RpbWVvdXQpO1xuICAgICAgdGhpcy5nY1RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IHsgUmVtb3ZhYmxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmFibGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbImlzVmFsaWRUaW1lb3V0IiwiaXNTZXJ2ZXIiLCJSZW1vdmFibGUiLCJkZXN0cm95IiwiY2xlYXJHY1RpbWVvdXQiLCJzY2hlZHVsZUdjIiwiY2FjaGVUaW1lIiwiZ2NUaW1lb3V0Iiwic2V0VGltZW91dCIsIm9wdGlvbmFsUmVtb3ZlIiwidXBkYXRlQ2FjaGVUaW1lIiwibmV3Q2FjaGVUaW1lIiwiTWF0aCIsIm1heCIsIkluZmluaXR5IiwiY2xlYXJUaW1lb3V0IiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/removable.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/retryer.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/retryer.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancelledError: () => (/* binding */ CancelledError),\n/* harmony export */   canFetch: () => (/* binding */ canFetch),\n/* harmony export */   createRetryer: () => (/* binding */ createRetryer),\n/* harmony export */   isCancelledError: () => (/* binding */ isCancelledError)\n/* harmony export */ });\n/* harmony import */ var _focusManager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./focusManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs\");\n/* harmony import */ var _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./onlineManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\n\nfunction defaultRetryDelay(failureCount) {\n    return Math.min(1000 * 2 ** failureCount, 30000);\n}\nfunction canFetch(networkMode) {\n    return (networkMode != null ? networkMode : \"online\") === \"online\" ? _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__.onlineManager.isOnline() : true;\n}\nclass CancelledError {\n    constructor(options){\n        this.revert = options == null ? void 0 : options.revert;\n        this.silent = options == null ? void 0 : options.silent;\n    }\n}\nfunction isCancelledError(value) {\n    return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n    let isRetryCancelled = false;\n    let failureCount = 0;\n    let isResolved = false;\n    let continueFn;\n    let promiseResolve;\n    let promiseReject;\n    const promise = new Promise((outerResolve, outerReject)=>{\n        promiseResolve = outerResolve;\n        promiseReject = outerReject;\n    });\n    const cancel = (cancelOptions)=>{\n        if (!isResolved) {\n            reject(new CancelledError(cancelOptions));\n            config.abort == null ? void 0 : config.abort();\n        }\n    };\n    const cancelRetry = ()=>{\n        isRetryCancelled = true;\n    };\n    const continueRetry = ()=>{\n        isRetryCancelled = false;\n    };\n    const shouldPause = ()=>!_focusManager_mjs__WEBPACK_IMPORTED_MODULE_1__.focusManager.isFocused() || config.networkMode !== \"always\" && !_onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__.onlineManager.isOnline();\n    const resolve = (value)=>{\n        if (!isResolved) {\n            isResolved = true;\n            config.onSuccess == null ? void 0 : config.onSuccess(value);\n            continueFn == null ? void 0 : continueFn();\n            promiseResolve(value);\n        }\n    };\n    const reject = (value)=>{\n        if (!isResolved) {\n            isResolved = true;\n            config.onError == null ? void 0 : config.onError(value);\n            continueFn == null ? void 0 : continueFn();\n            promiseReject(value);\n        }\n    };\n    const pause = ()=>{\n        return new Promise((continueResolve)=>{\n            continueFn = (value)=>{\n                if (isResolved || !shouldPause()) {\n                    return continueResolve(value);\n                }\n            };\n            config.onPause == null ? void 0 : config.onPause();\n        }).then(()=>{\n            continueFn = undefined;\n            if (!isResolved) {\n                config.onContinue == null ? void 0 : config.onContinue();\n            }\n        });\n    }; // Create loop function\n    const run = ()=>{\n        // Do nothing if already resolved\n        if (isResolved) {\n            return;\n        }\n        let promiseOrValue; // Execute query\n        try {\n            promiseOrValue = config.fn();\n        } catch (error) {\n            promiseOrValue = Promise.reject(error);\n        }\n        Promise.resolve(promiseOrValue).then(resolve).catch((error)=>{\n            var _config$retry, _config$retryDelay;\n            // Stop if the fetch is already resolved\n            if (isResolved) {\n                return;\n            } // Do we need to retry the request?\n            const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n            const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n            const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n            const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n            if (isRetryCancelled || !shouldRetry) {\n                // We are done if the query does not need to be retried\n                reject(error);\n                return;\n            }\n            failureCount++; // Notify on fail\n            config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.sleep)(delay) // Pause if the document is not visible or when the device is offline\n            .then(()=>{\n                if (shouldPause()) {\n                    return pause();\n                }\n            }).then(()=>{\n                if (isRetryCancelled) {\n                    reject(error);\n                } else {\n                    run();\n                }\n            });\n        });\n    }; // Start loop\n    if (canFetch(config.networkMode)) {\n        run();\n    } else {\n        pause().then(run);\n    }\n    return {\n        promise,\n        cancel,\n        continue: ()=>{\n            continueFn == null ? void 0 : continueFn();\n        },\n        cancelRetry,\n        continueRetry\n    };\n}\n //# sourceMappingURL=retryer.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/retryer.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/subscribable.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Subscribable: () => (/* binding */ Subscribable)\n/* harmony export */ });\nclass Subscribable {\n    constructor(){\n        this.listeners = [];\n        this.subscribe = this.subscribe.bind(this);\n    }\n    subscribe(listener) {\n        this.listeners.push(listener);\n        this.onSubscribe();\n        return ()=>{\n            this.listeners = this.listeners.filter((x)=>x !== listener);\n            this.onUnsubscribe();\n        };\n    }\n    hasListeners() {\n        return this.listeners.length > 0;\n    }\n    onSubscribe() {}\n    onUnsubscribe() {}\n}\n //# sourceMappingURL=subscribable.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL3N1YnNjcmliYWJsZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BO0lBQ0pDLGFBQWM7UUFDWixJQUFJLENBQUNDLFNBQVMsR0FBRyxFQUFFO1FBQ25CLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUksQ0FBQ0EsU0FBUyxDQUFDQyxJQUFJLENBQUMsSUFBSTtJQUMzQztJQUVBRCxVQUFVRSxRQUFRLEVBQUU7UUFDbEIsSUFBSSxDQUFDSCxTQUFTLENBQUNJLElBQUksQ0FBQ0Q7UUFDcEIsSUFBSSxDQUFDRSxXQUFXO1FBQ2hCLE9BQU87WUFDTCxJQUFJLENBQUNMLFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQ00sTUFBTSxDQUFDQyxDQUFBQSxJQUFLQSxNQUFNSjtZQUNsRCxJQUFJLENBQUNLLGFBQWE7UUFDcEI7SUFDRjtJQUVBQyxlQUFlO1FBQ2IsT0FBTyxJQUFJLENBQUNULFNBQVMsQ0FBQ1UsTUFBTSxHQUFHO0lBQ2pDO0lBRUFMLGNBQWMsQ0FDZDtJQUVBRyxnQkFBZ0IsQ0FDaEI7QUFFRjtBQUV3QixDQUN4Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYW5kaW5nLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9zdWJzY3JpYmFibGUubWpzPzY2OTIiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU3Vic2NyaWJhYmxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLnN1YnNjcmliZSA9IHRoaXMuc3Vic2NyaWJlLmJpbmQodGhpcyk7XG4gIH1cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB0aGlzLm9uU3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuZmlsdGVyKHggPT4geCAhPT0gbGlzdGVuZXIpO1xuICAgICAgdGhpcy5vblVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfVxuXG4gIGhhc0xpc3RlbmVycygpIHtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIG9uU3Vic2NyaWJlKCkgey8vIERvIG5vdGhpbmdcbiAgfVxuXG4gIG9uVW5zdWJzY3JpYmUoKSB7Ly8gRG8gbm90aGluZ1xuICB9XG5cbn1cblxuZXhwb3J0IHsgU3Vic2NyaWJhYmxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmFibGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlN1YnNjcmliYWJsZSIsImNvbnN0cnVjdG9yIiwibGlzdGVuZXJzIiwic3Vic2NyaWJlIiwiYmluZCIsImxpc3RlbmVyIiwicHVzaCIsIm9uU3Vic2NyaWJlIiwiZmlsdGVyIiwieCIsIm9uVW5zdWJzY3JpYmUiLCJoYXNMaXN0ZW5lcnMiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/utils.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   functionalUpdate: () => (/* binding */ functionalUpdate),\n/* harmony export */   getAbortController: () => (/* binding */ getAbortController),\n/* harmony export */   hashQueryKey: () => (/* binding */ hashQueryKey),\n/* harmony export */   hashQueryKeyByOptions: () => (/* binding */ hashQueryKeyByOptions),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isPlainArray: () => (/* binding */ isPlainArray),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isQueryKey: () => (/* binding */ isQueryKey),\n/* harmony export */   isServer: () => (/* binding */ isServer),\n/* harmony export */   isValidTimeout: () => (/* binding */ isValidTimeout),\n/* harmony export */   matchMutation: () => (/* binding */ matchMutation),\n/* harmony export */   matchQuery: () => (/* binding */ matchQuery),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   parseFilterArgs: () => (/* binding */ parseFilterArgs),\n/* harmony export */   parseMutationArgs: () => (/* binding */ parseMutationArgs),\n/* harmony export */   parseMutationFilterArgs: () => (/* binding */ parseMutationFilterArgs),\n/* harmony export */   parseQueryArgs: () => (/* binding */ parseQueryArgs),\n/* harmony export */   partialDeepEqual: () => (/* binding */ partialDeepEqual),\n/* harmony export */   partialMatchKey: () => (/* binding */ partialMatchKey),\n/* harmony export */   replaceAt: () => (/* binding */ replaceAt),\n/* harmony export */   replaceData: () => (/* binding */ replaceData),\n/* harmony export */   replaceEqualDeep: () => (/* binding */ replaceEqualDeep),\n/* harmony export */   scheduleMicrotask: () => (/* binding */ scheduleMicrotask),\n/* harmony export */   shallowEqualObjects: () => (/* binding */ shallowEqualObjects),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   timeUntilStale: () => (/* binding */ timeUntilStale)\n/* harmony export */ });\n// TYPES\n// UTILS\nconst isServer =  true || 0;\nfunction noop() {\n    return undefined;\n}\nfunction functionalUpdate(updater, input) {\n    return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n    return typeof value === \"number\" && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n    return array1.filter((x)=>array2.indexOf(x) === -1);\n}\nfunction replaceAt(array, index, value) {\n    const copy = array.slice(0);\n    copy[index] = value;\n    return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n    if (!isQueryKey(arg1)) {\n        return arg1;\n    }\n    if (typeof arg2 === \"function\") {\n        return {\n            ...arg3,\n            queryKey: arg1,\n            queryFn: arg2\n        };\n    }\n    return {\n        ...arg2,\n        queryKey: arg1\n    };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n    if (isQueryKey(arg1)) {\n        if (typeof arg2 === \"function\") {\n            return {\n                ...arg3,\n                mutationKey: arg1,\n                mutationFn: arg2\n            };\n        }\n        return {\n            ...arg2,\n            mutationKey: arg1\n        };\n    }\n    if (typeof arg1 === \"function\") {\n        return {\n            ...arg2,\n            mutationFn: arg1\n        };\n    }\n    return {\n        ...arg1\n    };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n    return isQueryKey(arg1) ? [\n        {\n            ...arg2,\n            queryKey: arg1\n        },\n        arg3\n    ] : [\n        arg1 || {},\n        arg2\n    ];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n    return isQueryKey(arg1) ? [\n        {\n            ...arg2,\n            mutationKey: arg1\n        },\n        arg3\n    ] : [\n        arg1 || {},\n        arg2\n    ];\n}\nfunction matchQuery(filters, query) {\n    const { type = \"all\", exact, fetchStatus, predicate, queryKey, stale } = filters;\n    if (isQueryKey(queryKey)) {\n        if (exact) {\n            if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n                return false;\n            }\n        } else if (!partialMatchKey(query.queryKey, queryKey)) {\n            return false;\n        }\n    }\n    if (type !== \"all\") {\n        const isActive = query.isActive();\n        if (type === \"active\" && !isActive) {\n            return false;\n        }\n        if (type === \"inactive\" && isActive) {\n            return false;\n        }\n    }\n    if (typeof stale === \"boolean\" && query.isStale() !== stale) {\n        return false;\n    }\n    if (typeof fetchStatus !== \"undefined\" && fetchStatus !== query.state.fetchStatus) {\n        return false;\n    }\n    if (predicate && !predicate(query)) {\n        return false;\n    }\n    return true;\n}\nfunction matchMutation(filters, mutation) {\n    const { exact, fetching, predicate, mutationKey } = filters;\n    if (isQueryKey(mutationKey)) {\n        if (!mutation.options.mutationKey) {\n            return false;\n        }\n        if (exact) {\n            if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n                return false;\n            }\n        } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n            return false;\n        }\n    }\n    if (typeof fetching === \"boolean\" && mutation.state.status === \"loading\" !== fetching) {\n        return false;\n    }\n    if (predicate && !predicate(mutation)) {\n        return false;\n    }\n    return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n    const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n    return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */ function hashQueryKey(queryKey) {\n    return JSON.stringify(queryKey, (_, val)=>isPlainObject(val) ? Object.keys(val).sort().reduce((result, key)=>{\n            result[key] = val[key];\n            return result;\n        }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */ function partialMatchKey(a, b) {\n    return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */ function partialDeepEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n        return !Object.keys(b).some((key)=>!partialDeepEqual(a[key], b[key]));\n    }\n    return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */ function replaceEqualDeep(a, b) {\n    if (a === b) {\n        return a;\n    }\n    const array = isPlainArray(a) && isPlainArray(b);\n    if (array || isPlainObject(a) && isPlainObject(b)) {\n        const aSize = array ? a.length : Object.keys(a).length;\n        const bItems = array ? b : Object.keys(b);\n        const bSize = bItems.length;\n        const copy = array ? [] : {};\n        let equalItems = 0;\n        for(let i = 0; i < bSize; i++){\n            const key = array ? i : bItems[i];\n            copy[key] = replaceEqualDeep(a[key], b[key]);\n            if (copy[key] === a[key]) {\n                equalItems++;\n            }\n        }\n        return aSize === bSize && equalItems === aSize ? a : copy;\n    }\n    return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */ function shallowEqualObjects(a, b) {\n    if (a && !b || b && !a) {\n        return false;\n    }\n    for(const key in a){\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isPlainArray(value) {\n    return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o) {\n    if (!hasObjectPrototype(o)) {\n        return false;\n    } // If has modified constructor\n    const ctor = o.constructor;\n    if (typeof ctor === \"undefined\") {\n        return true;\n    } // If has modified prototype\n    const prot = ctor.prototype;\n    if (!hasObjectPrototype(prot)) {\n        return false;\n    } // If constructor does not have an Object-specific method\n    if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n        return false;\n    } // Most likely a plain Object\n    return true;\n}\nfunction hasObjectPrototype(o) {\n    return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction isQueryKey(value) {\n    return Array.isArray(value);\n}\nfunction isError(value) {\n    return value instanceof Error;\n}\nfunction sleep(timeout) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, timeout);\n    });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */ function scheduleMicrotask(callback) {\n    sleep(0).then(callback);\n}\nfunction getAbortController() {\n    if (typeof AbortController === \"function\") {\n        return new AbortController();\n    }\n}\nfunction replaceData(prevData, data, options) {\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n        return prevData;\n    } else if (typeof options.structuralSharing === \"function\") {\n        return options.structuralSharing(prevData, data);\n    } else if (options.structuralSharing !== false) {\n        // Structurally share data between prev and new data if needed\n        return replaceEqualDeep(prevData, data);\n    }\n    return data;\n}\n //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryClientProvider: () => (/* binding */ QueryClientProvider),\n/* harmony export */   defaultContext: () => (/* binding */ defaultContext),\n/* harmony export */   useQueryClient: () => (/* binding */ useQueryClient)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nconst defaultContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(context, contextSharing) {\n    if (context) {\n        return context;\n    }\n    if (contextSharing && \"undefined\" !== \"undefined\") {}\n    return defaultContext;\n}\nconst useQueryClient = ({ context } = {})=>{\n    const queryClient = react__WEBPACK_IMPORTED_MODULE_0__.useContext(getQueryClientContext(context, react__WEBPACK_IMPORTED_MODULE_0__.useContext(QueryClientSharingContext)));\n    if (!queryClient) {\n        throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n    }\n    return queryClient;\n};\nconst QueryClientProvider = ({ client, children, context, contextSharing = false })=>{\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        client.mount();\n        return ()=>{\n            client.unmount();\n        };\n    }, [\n        client\n    ]);\n    if ( true && contextSharing) {\n        client.getLogger().error(\"The contextSharing option has been deprecated and will be removed in the next major version\");\n    }\n    const Context = getQueryClientContext(context, contextSharing);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QueryClientSharingContext.Provider, {\n        value: !context && contextSharing\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Context.Provider, {\n        value: client\n    }, children));\n};\n //# sourceMappingURL=QueryClientProvider.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9RdWVyeUNsaWVudFByb3ZpZGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStCO0FBRS9CLE1BQU1DLGlCQUFpQixXQUFXLEdBQUVELGdEQUFtQixDQUFDRztBQUN4RCxNQUFNQyw0QkFBNEIsV0FBVyxHQUFFSixnREFBbUIsQ0FBQyxRQUFRLDZDQUE2QztBQUN4SCwwRUFBMEU7QUFDMUUsNENBQTRDO0FBQzVDLCtDQUErQztBQUMvQyxnREFBZ0Q7QUFDaEQsdURBQXVEO0FBQ3ZELHFCQUFxQjtBQUVyQixTQUFTSyxzQkFBc0JDLE9BQU8sRUFBRUMsY0FBYztJQUNwRCxJQUFJRCxTQUFTO1FBQ1gsT0FBT0E7SUFDVDtJQUVBLElBQUlDLGtCQUFrQixnQkFBa0IsYUFBYSxFQU1wRDtJQUVELE9BQU9OO0FBQ1Q7QUFFQSxNQUFNUyxpQkFBaUIsQ0FBQyxFQUN0QkosT0FBTyxFQUNSLEdBQUcsQ0FBQyxDQUFDO0lBQ0osTUFBTUssY0FBY1gsNkNBQWdCLENBQUNLLHNCQUFzQkMsU0FBU04sNkNBQWdCLENBQUNJO0lBRXJGLElBQUksQ0FBQ08sYUFBYTtRQUNoQixNQUFNLElBQUlFLE1BQU07SUFDbEI7SUFFQSxPQUFPRjtBQUNUO0FBQ0EsTUFBTUcsc0JBQXNCLENBQUMsRUFDM0JDLE1BQU0sRUFDTkMsUUFBUSxFQUNSVixPQUFPLEVBQ1BDLGlCQUFpQixLQUFLLEVBQ3ZCO0lBQ0NQLDRDQUFlLENBQUM7UUFDZGUsT0FBT0csS0FBSztRQUNaLE9BQU87WUFDTEgsT0FBT0ksT0FBTztRQUNoQjtJQUNGLEdBQUc7UUFBQ0o7S0FBTztJQUVYLElBQUlLLEtBQXlCLElBQWdCYixnQkFBZ0I7UUFDM0RRLE9BQU9NLFNBQVMsR0FBR0MsS0FBSyxDQUFDO0lBQzNCO0lBRUEsTUFBTUMsVUFBVWxCLHNCQUFzQkMsU0FBU0M7SUFDL0MsT0FBTyxXQUFXLEdBQUVQLGdEQUFtQixDQUFDSSwwQkFBMEJxQixRQUFRLEVBQUU7UUFDMUVDLE9BQU8sQ0FBQ3BCLFdBQVdDO0lBQ3JCLEdBQUcsV0FBVyxHQUFFUCxnREFBbUIsQ0FBQ3VCLFFBQVFFLFFBQVEsRUFBRTtRQUNwREMsT0FBT1g7SUFDVCxHQUFHQztBQUNMO0FBRStELENBQy9ELGdEQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmRpbmcvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9RdWVyeUNsaWVudFByb3ZpZGVyLm1qcz8zYWNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgZGVmYXVsdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuY29uc3QgUXVlcnlDbGllbnRTaGFyaW5nQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZhbHNlKTsgLy8gSWYgd2UgYXJlIGdpdmVuIGEgY29udGV4dCwgd2Ugd2lsbCB1c2UgaXQuXG4vLyBPdGhlcndpc2UsIGlmIGNvbnRleHRTaGFyaW5nIGlzIG9uLCB3ZSBzaGFyZSB0aGUgZmlyc3QgYW5kIGF0IGxlYXN0IG9uZVxuLy8gaW5zdGFuY2Ugb2YgdGhlIGNvbnRleHQgYWNyb3NzIHRoZSB3aW5kb3dcbi8vIHRvIGVuc3VyZSB0aGF0IGlmIFJlYWN0IFF1ZXJ5IGlzIHVzZWQgYWNyb3NzXG4vLyBkaWZmZXJlbnQgYnVuZGxlcyBvciBtaWNyb2Zyb250ZW5kcyB0aGV5IHdpbGxcbi8vIGFsbCB1c2UgdGhlIHNhbWUgKippbnN0YW5jZSoqIG9mIGNvbnRleHQsIHJlZ2FyZGxlc3Ncbi8vIG9mIG1vZHVsZSBzY29waW5nLlxuXG5mdW5jdGlvbiBnZXRRdWVyeUNsaWVudENvbnRleHQoY29udGV4dCwgY29udGV4dFNoYXJpbmcpIHtcbiAgaWYgKGNvbnRleHQpIHtcbiAgICByZXR1cm4gY29udGV4dDtcbiAgfVxuXG4gIGlmIChjb250ZXh0U2hhcmluZyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICghd2luZG93LlJlYWN0UXVlcnlDbGllbnRDb250ZXh0KSB7XG4gICAgICB3aW5kb3cuUmVhY3RRdWVyeUNsaWVudENvbnRleHQgPSBkZWZhdWx0Q29udGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gd2luZG93LlJlYWN0UXVlcnlDbGllbnRDb250ZXh0O1xuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRDb250ZXh0O1xufVxuXG5jb25zdCB1c2VRdWVyeUNsaWVudCA9ICh7XG4gIGNvbnRleHRcbn0gPSB7fSkgPT4ge1xuICBjb25zdCBxdWVyeUNsaWVudCA9IFJlYWN0LnVzZUNvbnRleHQoZ2V0UXVlcnlDbGllbnRDb250ZXh0KGNvbnRleHQsIFJlYWN0LnVzZUNvbnRleHQoUXVlcnlDbGllbnRTaGFyaW5nQ29udGV4dCkpKTtcblxuICBpZiAoIXF1ZXJ5Q2xpZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBRdWVyeUNsaWVudCBzZXQsIHVzZSBRdWVyeUNsaWVudFByb3ZpZGVyIHRvIHNldCBvbmUnKTtcbiAgfVxuXG4gIHJldHVybiBxdWVyeUNsaWVudDtcbn07XG5jb25zdCBRdWVyeUNsaWVudFByb3ZpZGVyID0gKHtcbiAgY2xpZW50LFxuICBjaGlsZHJlbixcbiAgY29udGV4dCxcbiAgY29udGV4dFNoYXJpbmcgPSBmYWxzZVxufSkgPT4ge1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNsaWVudC5tb3VudCgpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGllbnQudW5tb3VudCgpO1xuICAgIH07XG4gIH0sIFtjbGllbnRdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb250ZXh0U2hhcmluZykge1xuICAgIGNsaWVudC5nZXRMb2dnZXIoKS5lcnJvcihcIlRoZSBjb250ZXh0U2hhcmluZyBvcHRpb24gaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cIik7XG4gIH1cblxuICBjb25zdCBDb250ZXh0ID0gZ2V0UXVlcnlDbGllbnRDb250ZXh0KGNvbnRleHQsIGNvbnRleHRTaGFyaW5nKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFF1ZXJ5Q2xpZW50U2hhcmluZ0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogIWNvbnRleHQgJiYgY29udGV4dFNoYXJpbmdcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjbGllbnRcbiAgfSwgY2hpbGRyZW4pKTtcbn07XG5cbmV4cG9ydCB7IFF1ZXJ5Q2xpZW50UHJvdmlkZXIsIGRlZmF1bHRDb250ZXh0LCB1c2VRdWVyeUNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVlcnlDbGllbnRQcm92aWRlci5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJkZWZhdWx0Q29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJ1bmRlZmluZWQiLCJRdWVyeUNsaWVudFNoYXJpbmdDb250ZXh0IiwiZ2V0UXVlcnlDbGllbnRDb250ZXh0IiwiY29udGV4dCIsImNvbnRleHRTaGFyaW5nIiwid2luZG93IiwiUmVhY3RRdWVyeUNsaWVudENvbnRleHQiLCJ1c2VRdWVyeUNsaWVudCIsInF1ZXJ5Q2xpZW50IiwidXNlQ29udGV4dCIsIkVycm9yIiwiUXVlcnlDbGllbnRQcm92aWRlciIsImNsaWVudCIsImNoaWxkcmVuIiwidXNlRWZmZWN0IiwibW91bnQiLCJ1bm1vdW50IiwicHJvY2VzcyIsImdldExvZ2dlciIsImVycm9yIiwiQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryErrorResetBoundary: () => (/* binding */ QueryErrorResetBoundary),\n/* harmony export */   useQueryErrorResetBoundary: () => (/* binding */ useQueryErrorResetBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction createValue() {\n    let isReset = false;\n    return {\n        clearReset: ()=>{\n            isReset = false;\n        },\n        reset: ()=>{\n            isReset = true;\n        },\n        isReset: ()=>{\n            return isReset;\n        }\n    };\n}\nconst QueryErrorResetBoundaryContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(createValue()); // HOOK\nconst useQueryErrorResetBoundary = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(QueryErrorResetBoundaryContext); // COMPONENT\nconst QueryErrorResetBoundary = ({ children })=>{\n    const [value] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>createValue());\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QueryErrorResetBoundaryContext.Provider, {\n        value: value\n    }, typeof children === \"function\" ? children(value) : children);\n};\n //# sourceMappingURL=QueryErrorResetBoundary.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9RdWVyeUVycm9yUmVzZXRCb3VuZGFyeS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStCO0FBRS9CLFNBQVNDO0lBQ1AsSUFBSUMsVUFBVTtJQUNkLE9BQU87UUFDTEMsWUFBWTtZQUNWRCxVQUFVO1FBQ1o7UUFDQUUsT0FBTztZQUNMRixVQUFVO1FBQ1o7UUFDQUEsU0FBUztZQUNQLE9BQU9BO1FBQ1Q7SUFDRjtBQUNGO0FBRUEsTUFBTUcsaUNBQWlDLFdBQVcsR0FBRUwsZ0RBQW1CLENBQUNDLGdCQUFnQixPQUFPO0FBRS9GLE1BQU1NLDZCQUE2QixJQUFNUCw2Q0FBZ0IsQ0FBQ0ssaUNBQWlDLFlBQVk7QUFFdkcsTUFBTUksMEJBQTBCLENBQUMsRUFDL0JDLFFBQVEsRUFDVDtJQUNDLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHWCwyQ0FBYyxDQUFDLElBQU1DO0lBQ3JDLE9BQU8sV0FBVyxHQUFFRCxnREFBbUIsQ0FBQ0ssK0JBQStCUyxRQUFRLEVBQUU7UUFDL0VILE9BQU9BO0lBQ1QsR0FBRyxPQUFPRCxhQUFhLGFBQWFBLFNBQVNDLFNBQVNEO0FBQ3hEO0FBRStELENBQy9ELG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmRpbmcvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9RdWVyeUVycm9yUmVzZXRCb3VuZGFyeS5tanM/Zjk1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVZhbHVlKCkge1xuICBsZXQgaXNSZXNldCA9IGZhbHNlO1xuICByZXR1cm4ge1xuICAgIGNsZWFyUmVzZXQ6ICgpID0+IHtcbiAgICAgIGlzUmVzZXQgPSBmYWxzZTtcbiAgICB9LFxuICAgIHJlc2V0OiAoKSA9PiB7XG4gICAgICBpc1Jlc2V0ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGlzUmVzZXQ6ICgpID0+IHtcbiAgICAgIHJldHVybiBpc1Jlc2V0O1xuICAgIH1cbiAgfTtcbn1cblxuY29uc3QgUXVlcnlFcnJvclJlc2V0Qm91bmRhcnlDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoY3JlYXRlVmFsdWUoKSk7IC8vIEhPT0tcblxuY29uc3QgdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkgPSAoKSA9PiBSZWFjdC51c2VDb250ZXh0KFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dCk7IC8vIENPTVBPTkVOVFxuXG5jb25zdCBRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSA9ICh7XG4gIGNoaWxkcmVuXG59KSA9PiB7XG4gIGNvbnN0IFt2YWx1ZV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBjcmVhdGVWYWx1ZSgpKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB2YWx1ZVxuICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbih2YWx1ZSkgOiBjaGlsZHJlbik7XG59O1xuXG5leHBvcnQgeyBRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSwgdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZVZhbHVlIiwiaXNSZXNldCIsImNsZWFyUmVzZXQiLCJyZXNldCIsIlF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSIsInVzZUNvbnRleHQiLCJRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSIsImNoaWxkcmVuIiwidmFsdWUiLCJ1c2VTdGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensurePreventErrorBoundaryRetry: () => (/* binding */ ensurePreventErrorBoundaryRetry),\n/* harmony export */   getHasError: () => (/* binding */ getHasError),\n/* harmony export */   useClearResetErrorBoundary: () => (/* binding */ useClearResetErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/utils.mjs\");\n\n\nconst ensurePreventErrorBoundaryRetry = (options, errorResetBoundary)=>{\n    if (options.suspense || options.useErrorBoundary) {\n        // Prevent retrying failed query if the error boundary has not been reset yet\n        if (!errorResetBoundary.isReset()) {\n            options.retryOnMount = false;\n        }\n    }\n};\nconst useClearResetErrorBoundary = (errorResetBoundary)=>{\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        errorResetBoundary.clearReset();\n    }, [\n        errorResetBoundary\n    ]);\n};\nconst getHasError = ({ result, errorResetBoundary, useErrorBoundary, query })=>{\n    return result.isError && !errorResetBoundary.isReset() && !result.isFetching && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shouldThrowError)(useErrorBoundary, [\n        result.error,\n        query\n    ]);\n};\n //# sourceMappingURL=errorBoundaryUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9lcnJvckJvdW5kYXJ5VXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStCO0FBQ2dCO0FBRS9DLE1BQU1FLGtDQUFrQyxDQUFDQyxTQUFTQztJQUNoRCxJQUFJRCxRQUFRRSxRQUFRLElBQUlGLFFBQVFHLGdCQUFnQixFQUFFO1FBQ2hELDZFQUE2RTtRQUM3RSxJQUFJLENBQUNGLG1CQUFtQkcsT0FBTyxJQUFJO1lBQ2pDSixRQUFRSyxZQUFZLEdBQUc7UUFDekI7SUFDRjtBQUNGO0FBQ0EsTUFBTUMsNkJBQTZCTCxDQUFBQTtJQUNqQ0osNENBQWUsQ0FBQztRQUNkSSxtQkFBbUJPLFVBQVU7SUFDL0IsR0FBRztRQUFDUDtLQUFtQjtBQUN6QjtBQUNBLE1BQU1RLGNBQWMsQ0FBQyxFQUNuQkMsTUFBTSxFQUNOVCxrQkFBa0IsRUFDbEJFLGdCQUFnQixFQUNoQlEsS0FBSyxFQUNOO0lBQ0MsT0FBT0QsT0FBT0UsT0FBTyxJQUFJLENBQUNYLG1CQUFtQkcsT0FBTyxNQUFNLENBQUNNLE9BQU9HLFVBQVUsSUFBSWYsNERBQWdCQSxDQUFDSyxrQkFBa0I7UUFBQ08sT0FBT0ksS0FBSztRQUFFSDtLQUFNO0FBQzFJO0FBRW9GLENBQ3BGLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmRpbmcvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9lcnJvckJvdW5kYXJ5VXRpbHMubWpzPzBkMWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc2hvdWxkVGhyb3dFcnJvciB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY29uc3QgZW5zdXJlUHJldmVudEVycm9yQm91bmRhcnlSZXRyeSA9IChvcHRpb25zLCBlcnJvclJlc2V0Qm91bmRhcnkpID0+IHtcbiAgaWYgKG9wdGlvbnMuc3VzcGVuc2UgfHwgb3B0aW9ucy51c2VFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gUHJldmVudCByZXRyeWluZyBmYWlsZWQgcXVlcnkgaWYgdGhlIGVycm9yIGJvdW5kYXJ5IGhhcyBub3QgYmVlbiByZXNldCB5ZXRcbiAgICBpZiAoIWVycm9yUmVzZXRCb3VuZGFyeS5pc1Jlc2V0KCkpIHtcbiAgICAgIG9wdGlvbnMucmV0cnlPbk1vdW50ID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuY29uc3QgdXNlQ2xlYXJSZXNldEVycm9yQm91bmRhcnkgPSBlcnJvclJlc2V0Qm91bmRhcnkgPT4ge1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGVycm9yUmVzZXRCb3VuZGFyeS5jbGVhclJlc2V0KCk7XG4gIH0sIFtlcnJvclJlc2V0Qm91bmRhcnldKTtcbn07XG5jb25zdCBnZXRIYXNFcnJvciA9ICh7XG4gIHJlc3VsdCxcbiAgZXJyb3JSZXNldEJvdW5kYXJ5LFxuICB1c2VFcnJvckJvdW5kYXJ5LFxuICBxdWVyeVxufSkgPT4ge1xuICByZXR1cm4gcmVzdWx0LmlzRXJyb3IgJiYgIWVycm9yUmVzZXRCb3VuZGFyeS5pc1Jlc2V0KCkgJiYgIXJlc3VsdC5pc0ZldGNoaW5nICYmIHNob3VsZFRocm93RXJyb3IodXNlRXJyb3JCb3VuZGFyeSwgW3Jlc3VsdC5lcnJvciwgcXVlcnldKTtcbn07XG5cbmV4cG9ydCB7IGVuc3VyZVByZXZlbnRFcnJvckJvdW5kYXJ5UmV0cnksIGdldEhhc0Vycm9yLCB1c2VDbGVhclJlc2V0RXJyb3JCb3VuZGFyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JCb3VuZGFyeVV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInNob3VsZFRocm93RXJyb3IiLCJlbnN1cmVQcmV2ZW50RXJyb3JCb3VuZGFyeVJldHJ5Iiwib3B0aW9ucyIsImVycm9yUmVzZXRCb3VuZGFyeSIsInN1c3BlbnNlIiwidXNlRXJyb3JCb3VuZGFyeSIsImlzUmVzZXQiLCJyZXRyeU9uTW91bnQiLCJ1c2VDbGVhclJlc2V0RXJyb3JCb3VuZGFyeSIsInVzZUVmZmVjdCIsImNsZWFyUmVzZXQiLCJnZXRIYXNFcnJvciIsInJlc3VsdCIsInF1ZXJ5IiwiaXNFcnJvciIsImlzRmV0Y2hpbmciLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IsRestoringProvider: () => (/* binding */ IsRestoringProvider),\n/* harmony export */   useIsRestoring: () => (/* binding */ useIsRestoring)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nconst IsRestoringContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(false);\nconst useIsRestoring = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(IsRestoringContext);\nconst IsRestoringProvider = IsRestoringContext.Provider;\n //# sourceMappingURL=isRestoring.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9pc1Jlc3RvcmluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStCO0FBRS9CLE1BQU1DLHFCQUFxQixXQUFXLEdBQUVELGdEQUFtQixDQUFDO0FBQzVELE1BQU1HLGlCQUFpQixJQUFNSCw2Q0FBZ0IsQ0FBQ0M7QUFDOUMsTUFBTUksc0JBQXNCSixtQkFBbUJLLFFBQVE7QUFFUixDQUMvQyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYW5kaW5nLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvaXNSZXN0b3JpbmcubWpzP2I0ZDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBJc1Jlc3RvcmluZ0NvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChmYWxzZSk7XG5jb25zdCB1c2VJc1Jlc3RvcmluZyA9ICgpID0+IFJlYWN0LnVzZUNvbnRleHQoSXNSZXN0b3JpbmdDb250ZXh0KTtcbmNvbnN0IElzUmVzdG9yaW5nUHJvdmlkZXIgPSBJc1Jlc3RvcmluZ0NvbnRleHQuUHJvdmlkZXI7XG5cbmV4cG9ydCB7IElzUmVzdG9yaW5nUHJvdmlkZXIsIHVzZUlzUmVzdG9yaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Jlc3RvcmluZy5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJJc1Jlc3RvcmluZ0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlSXNSZXN0b3JpbmciLCJ1c2VDb250ZXh0IiwiSXNSZXN0b3JpbmdQcm92aWRlciIsIlByb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/suspense.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/suspense.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureStaleTime: () => (/* binding */ ensureStaleTime),\n/* harmony export */   fetchOptimistic: () => (/* binding */ fetchOptimistic),\n/* harmony export */   shouldSuspend: () => (/* binding */ shouldSuspend),\n/* harmony export */   willFetch: () => (/* binding */ willFetch)\n/* harmony export */ });\nconst ensureStaleTime = (defaultedOptions)=>{\n    if (defaultedOptions.suspense) {\n        // Always set stale time when using suspense to prevent\n        // fetching again when directly mounting after suspending\n        if (typeof defaultedOptions.staleTime !== \"number\") {\n            defaultedOptions.staleTime = 1000;\n        }\n    }\n};\nconst willFetch = (result, isRestoring)=>result.isLoading && result.isFetching && !isRestoring;\nconst shouldSuspend = (defaultedOptions, result, isRestoring)=>(defaultedOptions == null ? void 0 : defaultedOptions.suspense) && willFetch(result, isRestoring);\nconst fetchOptimistic = (defaultedOptions, observer, errorResetBoundary)=>observer.fetchOptimistic(defaultedOptions).then(({ data })=>{\n        defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n        defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch((error)=>{\n        errorResetBoundary.clearReset();\n        defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n        defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n //# sourceMappingURL=suspense.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9zdXNwZW5zZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE1BQU1BLGtCQUFrQkMsQ0FBQUE7SUFDdEIsSUFBSUEsaUJBQWlCQyxRQUFRLEVBQUU7UUFDN0IsdURBQXVEO1FBQ3ZELHlEQUF5RDtRQUN6RCxJQUFJLE9BQU9ELGlCQUFpQkUsU0FBUyxLQUFLLFVBQVU7WUFDbERGLGlCQUFpQkUsU0FBUyxHQUFHO1FBQy9CO0lBQ0Y7QUFDRjtBQUNBLE1BQU1DLFlBQVksQ0FBQ0MsUUFBUUMsY0FBZ0JELE9BQU9FLFNBQVMsSUFBSUYsT0FBT0csVUFBVSxJQUFJLENBQUNGO0FBQ3JGLE1BQU1HLGdCQUFnQixDQUFDUixrQkFBa0JJLFFBQVFDLGNBQWdCLENBQUNMLG9CQUFvQixPQUFPLEtBQUssSUFBSUEsaUJBQWlCQyxRQUFRLEtBQUtFLFVBQVVDLFFBQVFDO0FBQ3RKLE1BQU1JLGtCQUFrQixDQUFDVCxrQkFBa0JVLFVBQVVDLHFCQUF1QkQsU0FBU0QsZUFBZSxDQUFDVCxrQkFBa0JZLElBQUksQ0FBQyxDQUFDLEVBQzNIQyxJQUFJLEVBQ0w7UUFDQ2IsaUJBQWlCYyxTQUFTLElBQUksT0FBTyxLQUFLLElBQUlkLGlCQUFpQmMsU0FBUyxDQUFDRDtRQUN6RWIsaUJBQWlCZSxTQUFTLElBQUksT0FBTyxLQUFLLElBQUlmLGlCQUFpQmUsU0FBUyxDQUFDRixNQUFNO0lBQ2pGLEdBQUdHLEtBQUssQ0FBQ0MsQ0FBQUE7UUFDUE4sbUJBQW1CTyxVQUFVO1FBQzdCbEIsaUJBQWlCbUIsT0FBTyxJQUFJLE9BQU8sS0FBSyxJQUFJbkIsaUJBQWlCbUIsT0FBTyxDQUFDRjtRQUNyRWpCLGlCQUFpQmUsU0FBUyxJQUFJLE9BQU8sS0FBSyxJQUFJZixpQkFBaUJlLFNBQVMsQ0FBQ0ssV0FBV0g7SUFDdEY7QUFFc0UsQ0FDdEUscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFuZGluZy8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbGliL3N1c3BlbnNlLm1qcz8wZGFjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVuc3VyZVN0YWxlVGltZSA9IGRlZmF1bHRlZE9wdGlvbnMgPT4ge1xuICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5zdXNwZW5zZSkge1xuICAgIC8vIEFsd2F5cyBzZXQgc3RhbGUgdGltZSB3aGVuIHVzaW5nIHN1c3BlbnNlIHRvIHByZXZlbnRcbiAgICAvLyBmZXRjaGluZyBhZ2FpbiB3aGVuIGRpcmVjdGx5IG1vdW50aW5nIGFmdGVyIHN1c3BlbmRpbmdcbiAgICBpZiAodHlwZW9mIGRlZmF1bHRlZE9wdGlvbnMuc3RhbGVUaW1lICE9PSAnbnVtYmVyJykge1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5zdGFsZVRpbWUgPSAxMDAwO1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IHdpbGxGZXRjaCA9IChyZXN1bHQsIGlzUmVzdG9yaW5nKSA9PiByZXN1bHQuaXNMb2FkaW5nICYmIHJlc3VsdC5pc0ZldGNoaW5nICYmICFpc1Jlc3RvcmluZztcbmNvbnN0IHNob3VsZFN1c3BlbmQgPSAoZGVmYXVsdGVkT3B0aW9ucywgcmVzdWx0LCBpc1Jlc3RvcmluZykgPT4gKGRlZmF1bHRlZE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGRlZmF1bHRlZE9wdGlvbnMuc3VzcGVuc2UpICYmIHdpbGxGZXRjaChyZXN1bHQsIGlzUmVzdG9yaW5nKTtcbmNvbnN0IGZldGNoT3B0aW1pc3RpYyA9IChkZWZhdWx0ZWRPcHRpb25zLCBvYnNlcnZlciwgZXJyb3JSZXNldEJvdW5kYXJ5KSA9PiBvYnNlcnZlci5mZXRjaE9wdGltaXN0aWMoZGVmYXVsdGVkT3B0aW9ucykudGhlbigoe1xuICBkYXRhXG59KSA9PiB7XG4gIGRlZmF1bHRlZE9wdGlvbnMub25TdWNjZXNzID09IG51bGwgPyB2b2lkIDAgOiBkZWZhdWx0ZWRPcHRpb25zLm9uU3VjY2VzcyhkYXRhKTtcbiAgZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQgPT0gbnVsbCA/IHZvaWQgMCA6IGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkKGRhdGEsIG51bGwpO1xufSkuY2F0Y2goZXJyb3IgPT4ge1xuICBlcnJvclJlc2V0Qm91bmRhcnkuY2xlYXJSZXNldCgpO1xuICBkZWZhdWx0ZWRPcHRpb25zLm9uRXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGRlZmF1bHRlZE9wdGlvbnMub25FcnJvcihlcnJvcik7XG4gIGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkID09IG51bGwgPyB2b2lkIDAgOiBkZWZhdWx0ZWRPcHRpb25zLm9uU2V0dGxlZCh1bmRlZmluZWQsIGVycm9yKTtcbn0pO1xuXG5leHBvcnQgeyBlbnN1cmVTdGFsZVRpbWUsIGZldGNoT3B0aW1pc3RpYywgc2hvdWxkU3VzcGVuZCwgd2lsbEZldGNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdXNwZW5zZS5tanMubWFwXG4iXSwibmFtZXMiOlsiZW5zdXJlU3RhbGVUaW1lIiwiZGVmYXVsdGVkT3B0aW9ucyIsInN1c3BlbnNlIiwic3RhbGVUaW1lIiwid2lsbEZldGNoIiwicmVzdWx0IiwiaXNSZXN0b3JpbmciLCJpc0xvYWRpbmciLCJpc0ZldGNoaW5nIiwic2hvdWxkU3VzcGVuZCIsImZldGNoT3B0aW1pc3RpYyIsIm9ic2VydmVyIiwiZXJyb3JSZXNldEJvdW5kYXJ5IiwidGhlbiIsImRhdGEiLCJvblN1Y2Nlc3MiLCJvblNldHRsZWQiLCJjYXRjaCIsImVycm9yIiwiY2xlYXJSZXNldCIsIm9uRXJyb3IiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/suspense.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/useBaseQuery.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/useBaseQuery.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBaseQuery: () => (/* binding */ useBaseQuery)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _useSyncExternalStore_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useSyncExternalStore.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _QueryErrorResetBoundary_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./QueryErrorResetBoundary.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs\");\n/* harmony import */ var _QueryClientProvider_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryClientProvider.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _isRestoring_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isRestoring.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs\");\n/* harmony import */ var _errorBoundaryUtils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errorBoundaryUtils.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs\");\n/* harmony import */ var _suspense_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./suspense.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/suspense.mjs\");\n\n\n\n\n\n\n\n\nfunction useBaseQuery(options, Observer) {\n    const queryClient = (0,_QueryClientProvider_mjs__WEBPACK_IMPORTED_MODULE_1__.useQueryClient)({\n        context: options.context\n    });\n    const isRestoring = (0,_isRestoring_mjs__WEBPACK_IMPORTED_MODULE_2__.useIsRestoring)();\n    const errorResetBoundary = (0,_QueryErrorResetBoundary_mjs__WEBPACK_IMPORTED_MODULE_3__.useQueryErrorResetBoundary)();\n    const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n    defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\"; // Include callbacks in batch renders\n    if (defaultedOptions.onError) {\n        defaultedOptions.onError = _tanstack_query_core__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batchCalls(defaultedOptions.onError);\n    }\n    if (defaultedOptions.onSuccess) {\n        defaultedOptions.onSuccess = _tanstack_query_core__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batchCalls(defaultedOptions.onSuccess);\n    }\n    if (defaultedOptions.onSettled) {\n        defaultedOptions.onSettled = _tanstack_query_core__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batchCalls(defaultedOptions.onSettled);\n    }\n    (0,_suspense_mjs__WEBPACK_IMPORTED_MODULE_5__.ensureStaleTime)(defaultedOptions);\n    (0,_errorBoundaryUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.ensurePreventErrorBoundaryRetry)(defaultedOptions, errorResetBoundary);\n    (0,_errorBoundaryUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.useClearResetErrorBoundary)(errorResetBoundary);\n    const [observer] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new Observer(queryClient, defaultedOptions));\n    const result = observer.getOptimisticResult(defaultedOptions);\n    (0,_useSyncExternalStore_mjs__WEBPACK_IMPORTED_MODULE_7__.useSyncExternalStore)(react__WEBPACK_IMPORTED_MODULE_0__.useCallback((onStoreChange)=>isRestoring ? ()=>undefined : observer.subscribe(_tanstack_query_core__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batchCalls(onStoreChange)), [\n        observer,\n        isRestoring\n    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        // Do not notify on updates because of changes in the options because\n        // these changes should already be reflected in the optimistic result.\n        observer.setOptions(defaultedOptions, {\n            listeners: false\n        });\n    }, [\n        defaultedOptions,\n        observer\n    ]); // Handle suspense\n    if ((0,_suspense_mjs__WEBPACK_IMPORTED_MODULE_5__.shouldSuspend)(defaultedOptions, result, isRestoring)) {\n        throw (0,_suspense_mjs__WEBPACK_IMPORTED_MODULE_5__.fetchOptimistic)(defaultedOptions, observer, errorResetBoundary);\n    } // Handle error boundary\n    if ((0,_errorBoundaryUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.getHasError)({\n        result,\n        errorResetBoundary,\n        useErrorBoundary: defaultedOptions.useErrorBoundary,\n        query: observer.getCurrentQuery()\n    })) {\n        throw result.error;\n    } // Handle result property usage tracking\n    return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\n //# sourceMappingURL=useBaseQuery.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91c2VCYXNlUXVlcnkubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUErQjtBQUNtQztBQUNiO0FBQ3NCO0FBQ2hCO0FBQ1I7QUFDaUU7QUFDbkM7QUFFakYsU0FBU1ksYUFBYUMsT0FBTyxFQUFFQyxRQUFRO0lBQ3JDLE1BQU1DLGNBQWNYLHdFQUFjQSxDQUFDO1FBQ2pDWSxTQUFTSCxRQUFRRyxPQUFPO0lBQzFCO0lBQ0EsTUFBTUMsY0FBY1osZ0VBQWNBO0lBQ2xDLE1BQU1hLHFCQUFxQmYsd0ZBQTBCQTtJQUNyRCxNQUFNZ0IsbUJBQW1CSixZQUFZSyxtQkFBbUIsQ0FBQ1AsVUFBVSxvR0FBb0c7SUFFdktNLGlCQUFpQkUsa0JBQWtCLEdBQUdKLGNBQWMsZ0JBQWdCLGNBQWMscUNBQXFDO0lBRXZILElBQUlFLGlCQUFpQkcsT0FBTyxFQUFFO1FBQzVCSCxpQkFBaUJHLE9BQU8sR0FBR3BCLCtEQUFhQSxDQUFDcUIsVUFBVSxDQUFDSixpQkFBaUJHLE9BQU87SUFDOUU7SUFFQSxJQUFJSCxpQkFBaUJLLFNBQVMsRUFBRTtRQUM5QkwsaUJBQWlCSyxTQUFTLEdBQUd0QiwrREFBYUEsQ0FBQ3FCLFVBQVUsQ0FBQ0osaUJBQWlCSyxTQUFTO0lBQ2xGO0lBRUEsSUFBSUwsaUJBQWlCTSxTQUFTLEVBQUU7UUFDOUJOLGlCQUFpQk0sU0FBUyxHQUFHdkIsK0RBQWFBLENBQUNxQixVQUFVLENBQUNKLGlCQUFpQk0sU0FBUztJQUNsRjtJQUVBaEIsOERBQWVBLENBQUNVO0lBQ2hCYix3RkFBK0JBLENBQUNhLGtCQUFrQkQ7SUFDbERYLG1GQUEwQkEsQ0FBQ1c7SUFDM0IsTUFBTSxDQUFDUSxTQUFTLEdBQUcxQiwyQ0FBYyxDQUFDLElBQU0sSUFBSWMsU0FBU0MsYUFBYUk7SUFDbEUsTUFBTVMsU0FBU0YsU0FBU0csbUJBQW1CLENBQUNWO0lBQzVDbEIsK0VBQW9CQSxDQUFDRCw4Q0FBaUIsQ0FBQytCLENBQUFBLGdCQUFpQmQsY0FBYyxJQUFNZSxZQUFZTixTQUFTTyxTQUFTLENBQUMvQiwrREFBYUEsQ0FBQ3FCLFVBQVUsQ0FBQ1EsaUJBQWlCO1FBQUNMO1FBQVVUO0tBQVksR0FBRyxJQUFNUyxTQUFTUSxnQkFBZ0IsSUFBSSxJQUFNUixTQUFTUSxnQkFBZ0I7SUFDalBsQyw0Q0FBZSxDQUFDO1FBQ2QscUVBQXFFO1FBQ3JFLHNFQUFzRTtRQUN0RTBCLFNBQVNVLFVBQVUsQ0FBQ2pCLGtCQUFrQjtZQUNwQ2tCLFdBQVc7UUFDYjtJQUNGLEdBQUc7UUFBQ2xCO1FBQWtCTztLQUFTLEdBQUcsa0JBQWtCO0lBRXBELElBQUloQiw0REFBYUEsQ0FBQ1Msa0JBQWtCUyxRQUFRWCxjQUFjO1FBQ3hELE1BQU1OLDhEQUFlQSxDQUFDUSxrQkFBa0JPLFVBQVVSO0lBQ3BELEVBQUUsd0JBQXdCO0lBRzFCLElBQUlWLG9FQUFXQSxDQUFDO1FBQ2RvQjtRQUNBVjtRQUNBb0Isa0JBQWtCbkIsaUJBQWlCbUIsZ0JBQWdCO1FBQ25EQyxPQUFPYixTQUFTYyxlQUFlO0lBQ2pDLElBQUk7UUFDRixNQUFNWixPQUFPYSxLQUFLO0lBQ3BCLEVBQUUsd0NBQXdDO0lBRzFDLE9BQU8sQ0FBQ3RCLGlCQUFpQnVCLG1CQUFtQixHQUFHaEIsU0FBU2lCLFdBQVcsQ0FBQ2YsVUFBVUE7QUFDaEY7QUFFd0IsQ0FDeEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFuZGluZy8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbGliL3VzZUJhc2VRdWVyeS5tanM/ZGI1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJy4vdXNlU3luY0V4dGVybmFsU3RvcmUubWpzJztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICdAdGFuc3RhY2svcXVlcnktY29yZSc7XG5pbXBvcnQgeyB1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSB9IGZyb20gJy4vUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkubWpzJztcbmltcG9ydCB7IHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSAnLi9RdWVyeUNsaWVudFByb3ZpZGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VJc1Jlc3RvcmluZyB9IGZyb20gJy4vaXNSZXN0b3JpbmcubWpzJztcbmltcG9ydCB7IGVuc3VyZVByZXZlbnRFcnJvckJvdW5kYXJ5UmV0cnksIHVzZUNsZWFyUmVzZXRFcnJvckJvdW5kYXJ5LCBnZXRIYXNFcnJvciB9IGZyb20gJy4vZXJyb3JCb3VuZGFyeVV0aWxzLm1qcyc7XG5pbXBvcnQgeyBlbnN1cmVTdGFsZVRpbWUsIHNob3VsZFN1c3BlbmQsIGZldGNoT3B0aW1pc3RpYyB9IGZyb20gJy4vc3VzcGVuc2UubWpzJztcblxuZnVuY3Rpb24gdXNlQmFzZVF1ZXJ5KG9wdGlvbnMsIE9ic2VydmVyKSB7XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoe1xuICAgIGNvbnRleHQ6IG9wdGlvbnMuY29udGV4dFxuICB9KTtcbiAgY29uc3QgaXNSZXN0b3JpbmcgPSB1c2VJc1Jlc3RvcmluZygpO1xuICBjb25zdCBlcnJvclJlc2V0Qm91bmRhcnkgPSB1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSgpO1xuICBjb25zdCBkZWZhdWx0ZWRPcHRpb25zID0gcXVlcnlDbGllbnQuZGVmYXVsdFF1ZXJ5T3B0aW9ucyhvcHRpb25zKTsgLy8gTWFrZSBzdXJlIHJlc3VsdHMgYXJlIG9wdGltaXN0aWNhbGx5IHNldCBpbiBmZXRjaGluZyBzdGF0ZSBiZWZvcmUgc3Vic2NyaWJpbmcgb3IgdXBkYXRpbmcgb3B0aW9uc1xuXG4gIGRlZmF1bHRlZE9wdGlvbnMuX29wdGltaXN0aWNSZXN1bHRzID0gaXNSZXN0b3JpbmcgPyAnaXNSZXN0b3JpbmcnIDogJ29wdGltaXN0aWMnOyAvLyBJbmNsdWRlIGNhbGxiYWNrcyBpbiBiYXRjaCByZW5kZXJzXG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMub25FcnJvcikge1xuICAgIGRlZmF1bHRlZE9wdGlvbnMub25FcnJvciA9IG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhkZWZhdWx0ZWRPcHRpb25zLm9uRXJyb3IpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMub25TdWNjZXNzKSB7XG4gICAgZGVmYXVsdGVkT3B0aW9ucy5vblN1Y2Nlc3MgPSBub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoZGVmYXVsdGVkT3B0aW9ucy5vblN1Y2Nlc3MpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkKSB7XG4gICAgZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQgPSBub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQpO1xuICB9XG5cbiAgZW5zdXJlU3RhbGVUaW1lKGRlZmF1bHRlZE9wdGlvbnMpO1xuICBlbnN1cmVQcmV2ZW50RXJyb3JCb3VuZGFyeVJldHJ5KGRlZmF1bHRlZE9wdGlvbnMsIGVycm9yUmVzZXRCb3VuZGFyeSk7XG4gIHVzZUNsZWFyUmVzZXRFcnJvckJvdW5kYXJ5KGVycm9yUmVzZXRCb3VuZGFyeSk7XG4gIGNvbnN0IFtvYnNlcnZlcl0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBuZXcgT2JzZXJ2ZXIocXVlcnlDbGllbnQsIGRlZmF1bHRlZE9wdGlvbnMpKTtcbiAgY29uc3QgcmVzdWx0ID0gb2JzZXJ2ZXIuZ2V0T3B0aW1pc3RpY1Jlc3VsdChkZWZhdWx0ZWRPcHRpb25zKTtcbiAgdXNlU3luY0V4dGVybmFsU3RvcmUoUmVhY3QudXNlQ2FsbGJhY2sob25TdG9yZUNoYW5nZSA9PiBpc1Jlc3RvcmluZyA/ICgpID0+IHVuZGVmaW5lZCA6IG9ic2VydmVyLnN1YnNjcmliZShub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMob25TdG9yZUNoYW5nZSkpLCBbb2JzZXJ2ZXIsIGlzUmVzdG9yaW5nXSksICgpID0+IG9ic2VydmVyLmdldEN1cnJlbnRSZXN1bHQoKSwgKCkgPT4gb2JzZXJ2ZXIuZ2V0Q3VycmVudFJlc3VsdCgpKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBEbyBub3Qgbm90aWZ5IG9uIHVwZGF0ZXMgYmVjYXVzZSBvZiBjaGFuZ2VzIGluIHRoZSBvcHRpb25zIGJlY2F1c2VcbiAgICAvLyB0aGVzZSBjaGFuZ2VzIHNob3VsZCBhbHJlYWR5IGJlIHJlZmxlY3RlZCBpbiB0aGUgb3B0aW1pc3RpYyByZXN1bHQuXG4gICAgb2JzZXJ2ZXIuc2V0T3B0aW9ucyhkZWZhdWx0ZWRPcHRpb25zLCB7XG4gICAgICBsaXN0ZW5lcnM6IGZhbHNlXG4gICAgfSk7XG4gIH0sIFtkZWZhdWx0ZWRPcHRpb25zLCBvYnNlcnZlcl0pOyAvLyBIYW5kbGUgc3VzcGVuc2VcblxuICBpZiAoc2hvdWxkU3VzcGVuZChkZWZhdWx0ZWRPcHRpb25zLCByZXN1bHQsIGlzUmVzdG9yaW5nKSkge1xuICAgIHRocm93IGZldGNoT3B0aW1pc3RpYyhkZWZhdWx0ZWRPcHRpb25zLCBvYnNlcnZlciwgZXJyb3JSZXNldEJvdW5kYXJ5KTtcbiAgfSAvLyBIYW5kbGUgZXJyb3IgYm91bmRhcnlcblxuXG4gIGlmIChnZXRIYXNFcnJvcih7XG4gICAgcmVzdWx0LFxuICAgIGVycm9yUmVzZXRCb3VuZGFyeSxcbiAgICB1c2VFcnJvckJvdW5kYXJ5OiBkZWZhdWx0ZWRPcHRpb25zLnVzZUVycm9yQm91bmRhcnksXG4gICAgcXVlcnk6IG9ic2VydmVyLmdldEN1cnJlbnRRdWVyeSgpXG4gIH0pKSB7XG4gICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICB9IC8vIEhhbmRsZSByZXN1bHQgcHJvcGVydHkgdXNhZ2UgdHJhY2tpbmdcblxuXG4gIHJldHVybiAhZGVmYXVsdGVkT3B0aW9ucy5ub3RpZnlPbkNoYW5nZVByb3BzID8gb2JzZXJ2ZXIudHJhY2tSZXN1bHQocmVzdWx0KSA6IHJlc3VsdDtcbn1cblxuZXhwb3J0IHsgdXNlQmFzZVF1ZXJ5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VCYXNlUXVlcnkubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJub3RpZnlNYW5hZ2VyIiwidXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkiLCJ1c2VRdWVyeUNsaWVudCIsInVzZUlzUmVzdG9yaW5nIiwiZW5zdXJlUHJldmVudEVycm9yQm91bmRhcnlSZXRyeSIsInVzZUNsZWFyUmVzZXRFcnJvckJvdW5kYXJ5IiwiZ2V0SGFzRXJyb3IiLCJlbnN1cmVTdGFsZVRpbWUiLCJzaG91bGRTdXNwZW5kIiwiZmV0Y2hPcHRpbWlzdGljIiwidXNlQmFzZVF1ZXJ5Iiwib3B0aW9ucyIsIk9ic2VydmVyIiwicXVlcnlDbGllbnQiLCJjb250ZXh0IiwiaXNSZXN0b3JpbmciLCJlcnJvclJlc2V0Qm91bmRhcnkiLCJkZWZhdWx0ZWRPcHRpb25zIiwiZGVmYXVsdFF1ZXJ5T3B0aW9ucyIsIl9vcHRpbWlzdGljUmVzdWx0cyIsIm9uRXJyb3IiLCJiYXRjaENhbGxzIiwib25TdWNjZXNzIiwib25TZXR0bGVkIiwib2JzZXJ2ZXIiLCJ1c2VTdGF0ZSIsInJlc3VsdCIsImdldE9wdGltaXN0aWNSZXN1bHQiLCJ1c2VDYWxsYmFjayIsIm9uU3RvcmVDaGFuZ2UiLCJ1bmRlZmluZWQiLCJzdWJzY3JpYmUiLCJnZXRDdXJyZW50UmVzdWx0IiwidXNlRWZmZWN0Iiwic2V0T3B0aW9ucyIsImxpc3RlbmVycyIsInVzZUVycm9yQm91bmRhcnkiLCJxdWVyeSIsImdldEN1cnJlbnRRdWVyeSIsImVycm9yIiwibm90aWZ5T25DaGFuZ2VQcm9wcyIsInRyYWNrUmVzdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/useBaseQuery.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/useMutation.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMutation: () => (/* binding */ useMutation)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _useSyncExternalStore_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useSyncExternalStore.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _QueryClientProvider_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./QueryClientProvider.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/utils.mjs\");\n\n\n\n\n\nfunction useMutation(arg1, arg2, arg3) {\n    const options = (0,_tanstack_query_core__WEBPACK_IMPORTED_MODULE_1__.parseMutationArgs)(arg1, arg2, arg3);\n    const queryClient = (0,_QueryClientProvider_mjs__WEBPACK_IMPORTED_MODULE_2__.useQueryClient)({\n        context: options.context\n    });\n    const [observer] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new _tanstack_query_core__WEBPACK_IMPORTED_MODULE_3__.MutationObserver(queryClient, options));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        observer.setOptions(options);\n    }, [\n        observer,\n        options\n    ]);\n    const result = (0,_useSyncExternalStore_mjs__WEBPACK_IMPORTED_MODULE_4__.useSyncExternalStore)(react__WEBPACK_IMPORTED_MODULE_0__.useCallback((onStoreChange)=>observer.subscribe(_tanstack_query_core__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batchCalls(onStoreChange)), [\n        observer\n    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());\n    const mutate = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((variables, mutateOptions)=>{\n        observer.mutate(variables, mutateOptions).catch(noop);\n    }, [\n        observer\n    ]);\n    if (result.error && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.shouldThrowError)(observer.options.useErrorBoundary, [\n        result.error\n    ])) {\n        throw result.error;\n    }\n    return {\n        ...result,\n        mutate,\n        mutateAsync: result.mutate\n    };\n} // eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n //# sourceMappingURL=useMutation.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91c2VNdXRhdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0I7QUFDbUM7QUFDd0I7QUFDL0I7QUFDWjtBQUUvQyxTQUFTTyxZQUFZQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSTtJQUNuQyxNQUFNQyxVQUFVVCx1RUFBaUJBLENBQUNNLE1BQU1DLE1BQU1DO0lBQzlDLE1BQU1FLGNBQWNQLHdFQUFjQSxDQUFDO1FBQ2pDUSxTQUFTRixRQUFRRSxPQUFPO0lBQzFCO0lBQ0EsTUFBTSxDQUFDQyxTQUFTLEdBQUdkLDJDQUFjLENBQUMsSUFBTSxJQUFJRyxrRUFBZ0JBLENBQUNTLGFBQWFEO0lBQzFFWCw0Q0FBZSxDQUFDO1FBQ2RjLFNBQVNHLFVBQVUsQ0FBQ047SUFDdEIsR0FBRztRQUFDRztRQUFVSDtLQUFRO0lBQ3RCLE1BQU1PLFNBQVNqQiwrRUFBb0JBLENBQUNELDhDQUFpQixDQUFDb0IsQ0FBQUEsZ0JBQWlCTixTQUFTTyxTQUFTLENBQUNqQiwrREFBYUEsQ0FBQ2tCLFVBQVUsQ0FBQ0YsaUJBQWlCO1FBQUNOO0tBQVMsR0FBRyxJQUFNQSxTQUFTUyxnQkFBZ0IsSUFBSSxJQUFNVCxTQUFTUyxnQkFBZ0I7SUFDbk4sTUFBTUMsU0FBU3hCLDhDQUFpQixDQUFDLENBQUN5QixXQUFXQztRQUMzQ1osU0FBU1UsTUFBTSxDQUFDQyxXQUFXQyxlQUFlQyxLQUFLLENBQUNDO0lBQ2xELEdBQUc7UUFBQ2Q7S0FBUztJQUViLElBQUlJLE9BQU9XLEtBQUssSUFBSXZCLDREQUFnQkEsQ0FBQ1EsU0FBU0gsT0FBTyxDQUFDbUIsZ0JBQWdCLEVBQUU7UUFBQ1osT0FBT1csS0FBSztLQUFDLEdBQUc7UUFDdkYsTUFBTVgsT0FBT1csS0FBSztJQUNwQjtJQUVBLE9BQU87UUFBRSxHQUFHWCxNQUFNO1FBQ2hCTTtRQUNBTyxhQUFhYixPQUFPTSxNQUFNO0lBQzVCO0FBQ0YsRUFBRSxnRUFBZ0U7QUFFbEUsU0FBU0ksUUFBUTtBQUVNLENBQ3ZCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmRpbmcvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91c2VNdXRhdGlvbi5tanM/OTQ2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJy4vdXNlU3luY0V4dGVybmFsU3RvcmUubWpzJztcbmltcG9ydCB7IHBhcnNlTXV0YXRpb25BcmdzLCBNdXRhdGlvbk9ic2VydmVyLCBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnO1xuaW1wb3J0IHsgdXNlUXVlcnlDbGllbnQgfSBmcm9tICcuL1F1ZXJ5Q2xpZW50UHJvdmlkZXIubWpzJztcbmltcG9ydCB7IHNob3VsZFRocm93RXJyb3IgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHBhcnNlTXV0YXRpb25BcmdzKGFyZzEsIGFyZzIsIGFyZzMpO1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KHtcbiAgICBjb250ZXh0OiBvcHRpb25zLmNvbnRleHRcbiAgfSk7XG4gIGNvbnN0IFtvYnNlcnZlcl0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBuZXcgTXV0YXRpb25PYnNlcnZlcihxdWVyeUNsaWVudCwgb3B0aW9ucykpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIG9ic2VydmVyLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gIH0sIFtvYnNlcnZlciwgb3B0aW9uc10pO1xuICBjb25zdCByZXN1bHQgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZShSZWFjdC51c2VDYWxsYmFjayhvblN0b3JlQ2hhbmdlID0+IG9ic2VydmVyLnN1YnNjcmliZShub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMob25TdG9yZUNoYW5nZSkpLCBbb2JzZXJ2ZXJdKSwgKCkgPT4gb2JzZXJ2ZXIuZ2V0Q3VycmVudFJlc3VsdCgpLCAoKSA9PiBvYnNlcnZlci5nZXRDdXJyZW50UmVzdWx0KCkpO1xuICBjb25zdCBtdXRhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygodmFyaWFibGVzLCBtdXRhdGVPcHRpb25zKSA9PiB7XG4gICAgb2JzZXJ2ZXIubXV0YXRlKHZhcmlhYmxlcywgbXV0YXRlT3B0aW9ucykuY2F0Y2gobm9vcCk7XG4gIH0sIFtvYnNlcnZlcl0pO1xuXG4gIGlmIChyZXN1bHQuZXJyb3IgJiYgc2hvdWxkVGhyb3dFcnJvcihvYnNlcnZlci5vcHRpb25zLnVzZUVycm9yQm91bmRhcnksIFtyZXN1bHQuZXJyb3JdKSkge1xuICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgfVxuXG4gIHJldHVybiB7IC4uLnJlc3VsdCxcbiAgICBtdXRhdGUsXG4gICAgbXV0YXRlQXN5bmM6IHJlc3VsdC5tdXRhdGVcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZXhwb3J0IHsgdXNlTXV0YXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZU11dGF0aW9uLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwicGFyc2VNdXRhdGlvbkFyZ3MiLCJNdXRhdGlvbk9ic2VydmVyIiwibm90aWZ5TWFuYWdlciIsInVzZVF1ZXJ5Q2xpZW50Iiwic2hvdWxkVGhyb3dFcnJvciIsInVzZU11dGF0aW9uIiwiYXJnMSIsImFyZzIiLCJhcmczIiwib3B0aW9ucyIsInF1ZXJ5Q2xpZW50IiwiY29udGV4dCIsIm9ic2VydmVyIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJzZXRPcHRpb25zIiwicmVzdWx0IiwidXNlQ2FsbGJhY2siLCJvblN0b3JlQ2hhbmdlIiwic3Vic2NyaWJlIiwiYmF0Y2hDYWxscyIsImdldEN1cnJlbnRSZXN1bHQiLCJtdXRhdGUiLCJ2YXJpYWJsZXMiLCJtdXRhdGVPcHRpb25zIiwiY2F0Y2giLCJub29wIiwiZXJyb3IiLCJ1c2VFcnJvckJvdW5kYXJ5IiwibXV0YXRlQXN5bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/useQuery.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/useQuery.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQuery: () => (/* binding */ useQuery)\n/* harmony export */ });\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs\");\n/* harmony import */ var _useBaseQuery_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useBaseQuery.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useBaseQuery.mjs\");\n\n\nfunction useQuery(arg1, arg2, arg3) {\n    const parsedOptions = (0,_tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__.parseQueryArgs)(arg1, arg2, arg3);\n    return (0,_useBaseQuery_mjs__WEBPACK_IMPORTED_MODULE_1__.useBaseQuery)(parsedOptions, _tanstack_query_core__WEBPACK_IMPORTED_MODULE_2__.QueryObserver);\n}\n //# sourceMappingURL=useQuery.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91c2VRdWVyeS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFxRTtBQUNuQjtBQUVsRCxTQUFTRyxTQUFTQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSTtJQUNoQyxNQUFNQyxnQkFBZ0JQLG9FQUFjQSxDQUFDSSxNQUFNQyxNQUFNQztJQUNqRCxPQUFPSiwrREFBWUEsQ0FBQ0ssZUFBZU4sK0RBQWFBO0FBQ2xEO0FBRW9CLENBQ3BCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmRpbmcvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91c2VRdWVyeS5tanM/YmY4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZVF1ZXJ5QXJncywgUXVlcnlPYnNlcnZlciB9IGZyb20gJ0B0YW5zdGFjay9xdWVyeS1jb3JlJztcbmltcG9ydCB7IHVzZUJhc2VRdWVyeSB9IGZyb20gJy4vdXNlQmFzZVF1ZXJ5Lm1qcyc7XG5cbmZ1bmN0aW9uIHVzZVF1ZXJ5KGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgY29uc3QgcGFyc2VkT3B0aW9ucyA9IHBhcnNlUXVlcnlBcmdzKGFyZzEsIGFyZzIsIGFyZzMpO1xuICByZXR1cm4gdXNlQmFzZVF1ZXJ5KHBhcnNlZE9wdGlvbnMsIFF1ZXJ5T2JzZXJ2ZXIpO1xufVxuXG5leHBvcnQgeyB1c2VRdWVyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlUXVlcnkubWpzLm1hcFxuIl0sIm5hbWVzIjpbInBhcnNlUXVlcnlBcmdzIiwiUXVlcnlPYnNlcnZlciIsInVzZUJhc2VRdWVyeSIsInVzZVF1ZXJ5IiwiYXJnMSIsImFyZzIiLCJhcmczIiwicGFyc2VkT3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/useQuery.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSyncExternalStore: () => (/* binding */ useSyncExternalStore)\n/* harmony export */ });\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n\n// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nconst useSyncExternalStore = use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore;\n //# sourceMappingURL=useSyncExternalStore.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91c2VTeW5jRXh0ZXJuYWxTdG9yZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUc7QUFFdkcsNEdBQTRHO0FBQzVHLE1BQU1BLHVCQUF1QkMsdUZBQXNCQTtBQUVuQixDQUNoQyxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYW5kaW5nLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvdXNlU3luY0V4dGVybmFsU3RvcmUubWpzP2Y4MTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmUgYXMgdXNlU3luY0V4dGVybmFsU3RvcmUkMSB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vaW5kZXguanMnO1xuXG4vLyBUZW1wb3Jhcnkgd29ya2Fyb3VuZCBkdWUgdG8gYW4gaXNzdWUgd2l0aCByZWFjdC1uYXRpdmUgdVNFUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9UYW5TdGFjay9xdWVyeS9wdWxsLzM2MDFcbmNvbnN0IHVzZVN5bmNFeHRlcm5hbFN0b3JlID0gdXNlU3luY0V4dGVybmFsU3RvcmUkMTtcblxuZXhwb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVN5bmNFeHRlcm5hbFN0b3JlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlJDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/utils.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/utils.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shouldThrowError: () => (/* binding */ shouldThrowError)\n/* harmony export */ });\nfunction shouldThrowError(_useErrorBoundary, params) {\n    // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n    if (typeof _useErrorBoundary === \"function\") {\n        return _useErrorBoundary(...params);\n    }\n    return !!_useErrorBoundary;\n}\n //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91dGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLGlCQUFpQkMsaUJBQWlCLEVBQUVDLE1BQU07SUFDakQscUZBQXFGO0lBQ3JGLElBQUksT0FBT0Qsc0JBQXNCLFlBQVk7UUFDM0MsT0FBT0EscUJBQXFCQztJQUM5QjtJQUVBLE9BQU8sQ0FBQyxDQUFDRDtBQUNYO0FBRTRCLENBQzVCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmRpbmcvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91dGlscy5tanM/MjE4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzaG91bGRUaHJvd0Vycm9yKF91c2VFcnJvckJvdW5kYXJ5LCBwYXJhbXMpIHtcbiAgLy8gQWxsb3cgdXNlRXJyb3JCb3VuZGFyeSBmdW5jdGlvbiB0byBvdmVycmlkZSB0aHJvd2luZyBiZWhhdmlvciBvbiBhIHBlci1lcnJvciBiYXNpc1xuICBpZiAodHlwZW9mIF91c2VFcnJvckJvdW5kYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIF91c2VFcnJvckJvdW5kYXJ5KC4uLnBhcmFtcyk7XG4gIH1cblxuICByZXR1cm4gISFfdXNlRXJyb3JCb3VuZGFyeTtcbn1cblxuZXhwb3J0IHsgc2hvdWxkVGhyb3dFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbInNob3VsZFRocm93RXJyb3IiLCJfdXNlRXJyb3JCb3VuZGFyeSIsInBhcmFtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/utils.mjs\n");

/***/ })

};
;